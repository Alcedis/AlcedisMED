<?php/*
 * AlcedisMED
 * Copyright (C) 2010-2016  Alcedis GmbH
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */ 

class dataCollector{   private $_db = null;   /**    * @var Smarty    */   private $_smarty = null;   private $_config = null;   private $_sortOrder = 'ASC';   private $_param = array();   private $_tables = array();   private $_dataPool = array(      'patient'      => array(),      'teilnehmer'   => array(),      'therapieplan' => array()   );   private $_data = array();   /**    * Config Buffer    *    * @var array    */   private $_configBuffer = array();   private $_userIdFields = array(        'user_id',        'arzt_id',        'hauptempfaenger_id',        'abs_oberarzt_id',        'abs_assistent_id',        'empfaenger_id',        'einweiser_id',        'melde_user_id',        'nachsorge_user_id',        'vorgestellt',        'vorgestellt2',        'nachbehandler_id',        'operateur1_id',        'operateur2_id',        'updateuser',        'createuser',    );   public function __construct($db, $smarty)   {        $this->_db      = $db;        $this->_smarty  = $smarty;        $this->_init();   }   public static function create($db, $smarty)   {      return new self($db, $smarty);   }   /**    * Init DataCollector to given patient    *    */   public function initPatient()   {      $filled = dlookup($this->_db, '`status`', "GROUP_CONCAT(DISTINCT form SEPARATOR ',')", "patient_id = '{$this->param('patient_id')}'");      $this->_tables['filled'] = strlen($filled) > 0 ? explode(',', $filled) : array();      //Data reset      $this->_data = $this->_dataPool;      return $this;   }   public function loadPatient($sortOrder = 'ASC')   {      $sortOrder = in_array($sortOrder, array('ASC', 'DESC')) === true ? $sortOrder : 'ASC';      $this->_sortOrder = $sortOrder;      $return = false;      $data = $this->_loadPatientData();      foreach ($this->_tables['patient'] as $pTable) {         if (in_array($pTable, $this->_tables['filled'])    === false ||             in_array($pTable, $this->_tables['db'])        === false ||             in_array($pTable, array('patient', 'status'))  === true) {            continue;         }         $fields = $this->_loadFields($pTable);         foreach ($fields as $record) {            $data[$pTable][] = $pTable === 'erkrankung' ? $this->_getErkrankungData($record) : $record;         }      }      $this->_data['patient'] = $this->_sortEntries($this->_allocateDlists($data));      return $this->_data['patient'];   }   public function loadTherapieplan()   {      $konferenzPatientId = $this->param('konferenz_patient_id');      if ($konferenzPatientId !== null) {         $fields = $this->_loadFields('therapieplan', $konferenzPatientId, 'konferenz_patient_id');         if (count($fields) > 0) {            $fields = reset($fields);            $fields['andere_id']['refdata']  = $this->_getVorlage('vorlage_therapie', $fields['andere_id']['value']);            $this->_data['therapieplan'] = $fields;         }      }      return $this->_data['therapieplan'];   }   public function loadTeilnehmer()   {      $konferenzId   = $konferenzPatientId = $this->param('konferenz_id');      if ($konferenzId !== null) {         $teilnehmer = sql_query_array($this->_db, "            SELECT               u.user_id            FROM konferenz_teilnehmer kt               INNER JOIN user u ON kt.user_id = u.user_id AND kt.konferenz_id = '$konferenzId' AND kt.teilgenommen = '1'            GROUP BY               u.user_id         ");         foreach ($teilnehmer as $user) {             $this->_data['teilnehmer'][] = reset($this->_loadFields('user', $user['user_id'], 'user_id'));         }      }      return $this->_data['teilnehmer'];   }   /**    * init dataCollector    */   private function _init()   {      $this->_tables = array(         'filled'       => array(),         'db'           => $this->_firstElementMerge(sql_query_array($this->_db, 'SHOW TABLES')),         'patient'      => relationManager::get('patient'),         'erkrankung'   => relationManager::get('erkrankung'),         'dlist'        => relationManager::get('dlist')      );      return $this;   }   private function _sortEntries($data)   {       if (isset($data['erkrankung']) === true) {          foreach ($data['erkrankung'] as $k => $erkData) {             foreach ($erkData as $checkTable => $dates) {                if ($checkTable != 'erkrankung' && in_array($checkTable, $this->_tables['erkrankung'])) {                    if ($this->_sortOrder == 'ASC') {                        ksort($dates);                    }else {                        krsort($dates);                    }                    foreach ($dates as $date => $datasets) {                       foreach ($datasets as $datarecord) {                           $data['erkrankung'][$k][$checkTable][] = $datarecord;                       }                       unset($data['erkrankung'][$k][$checkTable][$date]);                    }                }             }          }       }      return $data;   }    private function _allocateDlists($data)    {        if (isset($this->_tables['dlist']) === false) {            return $data;        }        $posData = array();        foreach ($this->_tables['dlist'] as $dlistTable) {            $fields = $this->_loadFields($dlistTable);            foreach($fields as $singleFields) {                $posData[] = $singleFields;            }        }        foreach ($posData as $posRecord) {            $table         = str_replace('_id', '', reset(array_keys($posRecord)));            $parentTable   = $this->_checkParentTable($table);            if (in_array($table, $this->_tables['dlist']) === true && in_array($parentTable, $this->_tables['erkrankung'])) {                $erkrankung_id = isset($posRecord['erkrankung_id']['value']) ? $posRecord['erkrankung_id']['value'] : null;                $parent_id     = isset($posRecord[$parentTable . '_id']['value']) ? $posRecord[$parentTable . '_id']['value'] : null;                if ($erkrankung_id !== null && $parent_id !== null) {                    foreach ($data['erkrankung'] as $curKey => $erkData) {                        if ($erkData['erkrankung_id']['value'] == $erkrankung_id) {                            if ($parentTable === 'erkrankung') {                                $data['erkrankung'][$curKey][$table][] = $posRecord;                                continue 2;                            } else {                                if (isset($data['erkrankung'][$curKey][$parentTable]) === true) {                                    foreach ($data['erkrankung'][$curKey][$parentTable] as $date => $dateRecords) {                                        foreach ($dateRecords as $dlistKey => $dlistRecord) {                                            if ($dlistRecord["{$parentTable}_id"]['value'] == $parent_id) {                                                $data['erkrankung'][$curKey][$parentTable][$date][$dlistKey][$table][] = $posRecord;                                                continue 4;                                            }                                        }                                    }                                }                            }                        }                    }                }            }        }        return $data;    }   private function _getRecordDate($table, $fields)   {      $defaultDate   = $this->_sortOrder == 'ASC' ? '0000-00-00' : '9999-12-31';      $dateField     = null;      $dateOrder = array(         'datum',                //standard datumsfeld         'beginn',               //therapie beginn datum         'datum_sicherung',    //tumorstatus         'doku_datum',           //dmp         'todesdatum'            //abschluss      );      foreach ($dateOrder as $field) {         if (in_array($field, array_keys($fields)) === true) {            $dateField = $field;            break;         }      }      return $dateField !== null && strlen($fields[$dateField]['value']) > 0 ? $fields[$dateField]['value'] : $defaultDate;   }   private function _getErkrankungData($erkrankungFields)   {      $erkrankungId   = $erkrankungFields['erkrankung_id']['value'];      $data           = $erkrankungFields;      foreach ($this->_tables['filled'] as $eTable) {         if (in_array($eTable, $this->_tables['erkrankung'])                  === false ||             in_array($eTable, $this->_tables['db'])                          === false ||             in_array($eTable, array('erkrankung', 'nachsorge_erkrankung'))   === true) {            continue;         }         $fields = $this->_loadFields($eTable, $erkrankungId);         foreach ($fields as $singleFields) {              $date = $this->_getRecordDate($eTable, $singleFields);              $data[$eTable][$date][] = $singleFields;         }      }      return $data;   }   private function _loadFields($table, $formId = null, $altField = null)   {      $this->_loadConfigs($table);      $pFields = array(         "fields/app/{$table}.php",         "fields/base/{$table}.php"      );      $db                = $this->_db;      $patient_id        = $this->param('patient_id');      $erkrankung_id     = $this->param('erkrankung_id');      $erkrankung        = $this->param('erkrankung');      $org_id            = $this->param('org_id');      $dateFilter        = $this->param('filter');      $timeFilter        = null;      //Time Filter with Therapieplan exclude      if ($dateFilter !== null && ($table === 'therapieplan' && $formId !== null && $altField === 'konferenz_patient_id') === false) {         $dateField = relationManager::date($table);         if ($dateField !== null) {            $timeFilter = " AND ($dateField IS NULL OR $dateField <= '$dateFilter')";         }      }      include 'core/initial/queries.php';      foreach ($pFields as $f) {         if (file_exists($f) === true) {            include $f;            break;         }      }      $checkField = $altField !== null ? $altField : 'patient_id';      $checkId    = $altField === null ? $this->param('patient_id') : $formId;      if ($table == 'nachsorge') {         $query = "            SELECT               n.*            FROM nachsorge_erkrankung e               LEFT JOIN nachsorge n ON n.nachsorge_id = e.nachsorge_id            WHERE               e.patient_id = '{$this->param('patient_id')}' AND               e.erkrankung_weitere_id = '{$this->param('erkrankung_id')}' {$timeFilter}            GROUP BY               n.nachsorge_id          ";      } else {         $query = "SELECT * FROM {$table} WHERE {$checkField} = '{$checkId}' {$timeFilter}";         $query .= ($altField === null && $formId !== null ? " AND erkrankung_id = '{$formId}'" : '');      }      data2list($this->_db, $fields, $query);      $fields = $this->_convertFields($fields, $table);      return $fields;   }   private function _loadPatientData()   {      $fields = $this->_loadFields('patient');      $fields = isset($fields[0]) ? reset($fields) : array();      //Sonderfelder: Alter und aktuelle Erkrankung (Die, von der die Funktion aufgerufen wird)      if (isset($fields['geburtsdatum']['value']) && strlen($fields['geburtsdatum']['value'])) {         $alter = date_diff_years(date('Y-m-d',strtotime($fields['geburtsdatum']['value'])), date('Y-m-d'));         $fields['alter'] = array(            'value' => $alter,            'bez'   => $alter         );      }      $fields['aktuelle_erkrankung'] = array(         'value'  => $this->param('erkrankung_id'),         'bez'    => $this->param('erkrankung')      );      return $fields;   }    /**     * workaround for parsing lbls of checkbox fields     *     * @param type $parentForm     * @param type $label     */    private function _parseLbl($label)    {        if (strlen($label) > 0) {            $parts = explode(',', $label);            foreach ($parts as $x => $part) {                if (str_contains($part, 'lbl-') === true) {                    $firstChar = null;                    if (str_starts_with(' ', $part)) {                        $firstChar = ' ';                        $part = trim($part);                    }                    $labelParts = explode('-', $part);                    $form       = $labelParts[1];                    $lblparts = array();                    for ($i = 2; $i < count($labelParts); $i++) {                        $lblparts[] = $labelParts[$i];                    }                    $lbl = implode('-', $lblparts);                    $config = $this->_loadConfigs($form, 'rec', false);                    $parts[$x] = $firstChar . (isset($config[$lbl]) ? $config[$lbl] : "Label '{$lbl}' in '{$form}' is missing");                } else if (strlen(trim($part)) == 0) {                    unset($parts[$x]);                }            }            $label = implode(',', $parts);        }        return $label;    }   //Feldinhalte umstrukturieren   private function _convertFields($fields, $table)   {        $returnFields = array();        $reloadConfig = false;        foreach ($fields as $field => $data) {           if (!isset($fields[$field]['value'])) {                return $returnFields;           }           if ($reloadConfig === true) {               $this->_loadConfigs($table);               $reloadConfig = false;           }           foreach ($fields[$field]['value'] as $key => $value) {               $value = str_replace(chr(array(1, 2, 3, 9, 10, 12, 13, 30)), " ", $value);               $tmpData = array();               switch ($data['type']) {                  case 'float'    :                     $tmpData['value'] = str_replace(',','.',$value);                     $tmpData['bez']   = str_replace('.',',',$value);                     $tmpData['lbl']   = isset($this->_config[$field]) == true ? $this->_config[$field] : '';                     break;                  case 'date'     :                     $tmpData['bez']   = $value;                     toDate($value, 'en');                     $tmpData['value'] = $value;                     $tmpData['lbl']   = isset($this->_config[$field]) == true ? $this->_config[$field] : '';                     break;                  case 'check'    :                     $tmpData['value'] = $value;                     $tmpData['bez'] = strlen($value) ? (isset($this->_config[$field]) ? $this->_config[$field] : $field) : '';                     $tmpData['lbl']   = isset($this->_config[$field]) == true ? $this->_config[$field] : '';                     break;                  case 'string'   :                     $tmpData['value'] = $value;                     $tmpData['bez']   = $value;                     if ($field == 'foto') {                        $tmpData['img'] = '##' . $this->_config['upload_dir'] . 'img/' . $value . '##';                     }                     $tmpData['lbl']   = isset($this->_config[$field]) == true ? $this->_config[$field] : '';                     break;                  case 'lookup'   :                  case 'query'    :                  case 'picker'   :                     $tmpData['value'] = $value;                     $tmpData['bez']   = isset($fields[$field]['bez'][$key]) ? $this->_parseLbl($fields[$field]['bez'][$key]) : 'nA';                     $tmpData['lbl']   = isset($this->_config[$field]) == true ? $this->_config[$field] : '';                     break;                  case 'textarea' :                     $tmpData['value'] = $value;                     $tmpData['bez'] = $value;                     $tmpData['lbl']   = isset($this->_config[$field]) == true ? $this->_config[$field] : '';                     break;                  case 'hidden'   :                     if (in_array($field, array('createtime','updatetime')) === true) {                        $tmpData['value'] = $value;                        $tmpData['bez']   = strlen($value) ? date('d.m.Y H:i:s', strtotime($value)) : '';                     } else {                        $tmpData['value'] = $value;                        $tmpData['bez'] = $value;                     }                     break;                  default :                     $tmpData['value'] = $value;                     $tmpData['lbl']   = isset($this->_config[$field]) == true ? $this->_config[$field] : '';                     $tmpData['bez']   = $value;                     if (strpos($data['type'], 'code_') !== false) {                        $codeType = str_replace('code_', '', $data['type']);                        switch ($codeType) {                           case 'ktst' :                              $tmpData['bez'] = dlookup($this->_db, 'l_ktst', 'name', "iknr='$value'");                              break;                           case 'icd' :                           case 'ops' :                           case 'o3'  :                              $tmpData['bez'] = $value;                              break;                           case 'nci' :                                $tmpData['bez'] = dlookup($this->_db, 'l_nci', 'grp', "code='$value'");                                break;                           default :                              break;                        }                     }                     break;               }               if (preg_match('~vorlage_[a-z_]{1,}_id~', $field) == true && strpos($table, 'vorlage_') === false) {                  $vorlageTable = str_replace('_id','',$field);                  $tmpData['refdata'] = $this->_getVorlage($vorlageTable, $value);                  $reloadConfig = true;               }               if ($field === 'konferenz_id' && strlen($value) && $table !== 'konferenz') {                  $tmpData['refdata'] = $this->_getVorlage('konferenz', $value);                  $reloadConfig = true;               }               if (in_array($field, $this->_userIdFields) && strlen($value) > 0 && $table !== 'user') {                  $tmpData['refdata'] = $this->_getVorlage('user', $value);                  $reloadConfig = true;               }               $returnFields[$key][$field] = $tmpData;           }        }        return $returnFields;   }   private function _getVorlage($table, $id)   {      if (isset($this->_vorlagen[$table][$id])) {         return $this->_vorlagen[$table][$id];      }      $posTables = in_array($table, array('konferenz', 'user')) === true ? array() : $this->_getPosTables($table);      $fields = $this->_loadFields($table, $id, $table . '_id');      if (count($posTables)>0 && isset($fields[0]) && $table != 'user') {          foreach ($posTables as $posTable) {             $fields[0][$posTable] = $this->_loadFields($posTable, $id, $table . '_id');          }      }      if (isset($fields[0])) {         $this->_vorlagen[$table][$id] = $fields[0];         return $fields[0];      } else {         return array();      }   }   private function _getPosTables($mainTable)   {      $return = array();      foreach ($this->_tables['db'] as $checkTable) {         if (substr($checkTable,0,1) != '_' && $checkTable != $mainTable && strpos($checkTable, $mainTable) !== false) {            $return[] = $checkTable;         }      }      return $return;   }    /**     *     *     * @access     * @param        $file     * @param string $section     * @param bool   $global     * @return array     */    private function _loadConfigs($file, $section = 'rec', $global = true)    {        $config = array();        if (isset($this->_configBuffer[$file]) === false) {            $paths = array('app', 'base');            foreach ($paths as $path) {                $filePath = "configs/{$path}/{$file}.conf";                if (file_exists($filePath) == true)                {                    $backup = $this->_smarty->get_config_vars();                    $this->_smarty->clear_config();                    $this->_smarty->config_load("{$path}/{$file}.conf", $section);                    $config = $this->_smarty->get_config_vars();                    $this->_configBuffer[$file] = $config;                    $this->_smarty->set_config($backup);                    break;                }            }        } else {            $config = $this->_configBuffer[$file];        }       if ($global === true) {           $this->_config = $config;       }       return $config;    }   public function get($section, $param = null)   {      $function = "load" . ucfirst($section);      return (count($this->_data[$section]) > 0 ? $this->_data[$section] : $this->{$function}($param));   }   /**    * param    *    * @param $name    * @param $value    * @return dataCollector    */   public function param($name, $value = null)   {      if ($value === null) {         return (array_key_exists($name, $this->_param) === true ? $this->_param[$name] : null);      } else {         $this->_param[$name] = $value;         return $this;      }   }   private function _checkParentTable($table)   {      $tParts = explode('_', $table);      array_pop($tParts);      $parentTable = implode('_', $tParts);      return in_array($parentTable, $this->_tables['erkrankung']) ? $parentTable : false;   }   private function _firstElementMerge($array)   {        $return = array();        foreach ($array as $elements) {            $return[] = reset($elements);        }        return $return;   }}?>