/*
 * AlcedisMED
 * Copyright (C) 2010-2016  Alcedis GmbH
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */ 

$(document).ready(function(){    initAjaxSort();    initAjaxSearchExtended();    initAjaxPages();    loadCookieFilter(false, true);    aUpdatePageList($('input[name="entrycount"]').attr('value'));    checkExtFilter();    initBflFormFilter();    initBflAddForm();    initBflBuffer();    initBflToggle();    aWriteCookie();    initGlobalTableHover(true);});function initBflAddForm(){   $('.add-ref-form').mouseenter(function(){       $('.reference-list').hide();       $(this).next().show();   });   $('.reference-list').mouseleave(function(event){      $(this).hide();   });}function initBflFormFilter(){   $('img.filter-img', '#sidebar.bfl').click(bflFormFilterActivate);   $('#remove-filter', '#sidebar.bfl').click(bflFormFilterRemove);}function initBflToggle(){   $(':input', '.bfl-toggle').click(bflCheckboxToggle).each(function(){      var         name        = $(this).attr('name').split('-')[1],         $inputs     = $('.bfl-buffer-input.' + name, '.bfl'),         checkedSize = $('.bfl-buffer-input.' + name + ':checked', '.bfl').size(),         size        = $inputs.size()      ;      if (size > 0) {         if (checkedSize == size) {            $(this).attr('checked', 'checked');         } else {            $(this).removeAttr('checked');         }      } else {         $(this).removeAttr('checked');      }   });}function bflCheckboxToggle() {   var      name     = $(this).attr('name').split('-')[1],      type     = $(this).is(':checked') ? 'on' : 'off'   ;   $('.bfl-buffer-input.' + name, '.bfl').each(function(){      if (type === 'on') {         if ($(this).is(':checked') === false) {            manageBflBuffer($(this).attr('checked', 'checked'));         }      } else {         if ($(this).is(':checked') === true) {            manageBflBuffer($(this).removeAttr('checked'));         }      }   });}function initBflBuffer(){   $(':input.bfl-buffer-input', 'table.bfl').click(fireManageBflBuffer);}function fireManageBflBuffer() {   manageBflBuffer($(this));   bfltoggleCheck($(this));}//set toggle checkboxfunction bfltoggleCheck($chkbx) {   var      name     = $chkbx.attr('name').split('-')[0],      $inputs     = $('.bfl-buffer-input.' + name, '.bfl'),      checkedSize = $('.bfl-buffer-input.' + name + ':checked', '.bfl').size(),      size        = $inputs.size(),      $toggle     = $(':input[name="bt-' + name + '"]', '.bfl-toggle')   ;   if (checkedSize == size) {      $toggle.attr('checked', 'checked');   } else {      $toggle.removeAttr('checked');   }}function manageBflBuffer($chkbx){   var      name     = $chkbx.attr('name').split('-')[0],      id       = $chkbx.attr('name').split('-')[1],      type     = $chkbx.is(':checked') ? 'add' : 'remove',      $buffer  = $(':input[name="buffer-' + name + '"]')   ;   try {      var buffer = JSON.parse($buffer.val());   } catch (e) {      var buffer = {         "add" : {},         "remove" : {}      };   }   if (type == 'add') {      if (buffer['remove'][id]) {         delete buffer['remove'][id];      } else {         buffer['add'][id] = 1;      }   } else {      if (buffer['add'][id]) {         delete buffer['add'][id];      } else {         buffer['remove'][id] = 1;      }   }   $buffer.val(JSON.stringify(buffer));}function useBflBuffer(){   $(':input.bfl-buffer').each(function(){      var name = $(this).attr('name').split('-')[1];      try {         var buffer = JSON.parse($(this).val());      } catch (e) {         var buffer = {            "add" : {},            "remove" : {}         };      }      $.each(buffer.add, function(id){         $(':input.bfl-buffer-input[name^="' + name + '-' + id + '"]').attr('checked', 'checked');      });      $.each(buffer.remove, function(id){         $(':input.bfl-buffer-input[name^="' + name + '-' + id + '"]').removeAttr('checked');      });   });}function unbindBflFunctions(){    $('.sort-img').unbind();    $(':input', '.bfl-toggle').unbind();    $('#ext-search-button').unbind();    $(':input.cookie-search-filter', '#ext-search').unbind();    $('select[name="entries"]').unbind();    $('img.page-arrow[alt="prev"]').unbind('click');    $('img.page-arrow[alt="next"]').unbind('click');    $('img.page-arrow[alt="last"]').unbind('click');    $('img.page-arrow[alt="first"]').unbind('click');    $('img.filter-img', '#sidebar.bfl').unbind('click');    $('#remove-filter', '#sidebar.bfl').unbind('click');    $(':input.bfl-buffer-input').unbind('click');    $('.add-ref-form').unbind('mouseenter');    $('.reference-list').unbind('mouseleave');}function resetBflFunctions(){    initAjaxSort(true);    initAjaxSearchExtended();    initAjaxPages();    initBflFormFilter();    initBflBuffer();    initBflAddForm();    useBflBuffer();    initBflToggle();    initGlobalTableHover(true);    popupHover();}function initAjaxSort(noImageAdd){   var addImages = addImages || false;       $listTable = $('table.listtable:not(.no-filter)'),       $filterRows = $('tr:eq(0) td:not(.unsortable)', $listTable),       $sortImg = $('<img/>').attr({         'src'   : 'media/img/base/sort-asc-deactive.png',         'class' : 'sort-img asc'       });   if ($filterRows.size() > 0 ) {      if (!noImageAdd)          $filterRows.append($sortImg);      $('.sort-img').click(function(){          aOrderList(this);      });   }}function initAjaxSearchExtended(){    var $searchDiv = $('#search-filter').attr('id', 'search-filter-ext'),        $searchInputs = $('td.ext-search', '.bfl'),        checkbox = ['nein','ja'];    var $mainInput = $('.filter-input', '#search-filter-ext'),        $input = $('input:first', $mainInput),        img = '<img class="ext-search-img" src="media/img/base/sort-desc-active.png"/>';    if ($('#search-filter-ext-wrap').size() == 0) {    	$mainInput.wrap($('<div id="search-filter-ext-wrap" style="width:280px"></div>').css('margin-top', '-27px'));    }    var $extSearch = $('<table/>').attr('id', 'ext-search').css({'display': 'none'});    $searchInputs.each(function(){       var $this = $(this),           field = $this.attr('class').split(' ')[2].split('-')[1],           $tr   = $('<tr/>');           input = '<td>';        switch (true) {           case $this.hasClass('cookietype-check'):              var lbl = $this.text();              input += lbl + ':</td><td class="ext-td-right"><select name="cookie-search-' + field + '" class="cookie-search-filter" style=":left !important; width: 60px !important">' +                        '<option></option><option value="1">' + checkbox[1] + '</option><option value="0">' + checkbox[0] + '</option></select>';              break;           case $this.hasClass('cookietype-lookup'):              var c = JSON.parse($('span.bfl-lookup-content', $this).text());              input += c.val + ':</td><td class="ext-td-right"><select name="cookie-search-' + field + '" class="cookie-search-filter" style="width: 133px !important">' +                          '<option></option>';              $.each(c.content, function(i, con){                 input += '<option value="' + con.code + '">' + con.bez  + '</option>';              });              input += '</select>';              break;           default:              var lbl = $this.text();              input += lbl + ':</td><td class="ext-td-right"><input name="cookie-search-' + field + '" class="cookie-search-filter" onfocus="this.value = this.value;"/>';              break;        }        $tr.append(input + '</td>');        $extSearch.append($tr);    });    $extSearch    	.append('<tr><td colspan="2"><img src="media/img/base/search-separator.png" alt="" /><td></tr>')    	.append('<tr><td colspan="2" style="padding-top:0px;text-align:right"><input id="ext-search-button" type="button" class="button" value="Suche"/><td></tr>')	;    $searchDiv.append($extSearch);    $input.focus(toggleExtSearchbar);    $('#start-search').click(toggleExtSearchbar);    $('#ext-search-button').click(function(){        aListSearch();    });    $('input.cookie-search-filter', '#ext-search').keypress(function(e){        return conformSearchCharsIn(e);    }).keyup(function(e){        if (e.keyCode == 13) {            aListSearch();        }    });}function bflFormFilterActivate(){   var $filter = $(this),      typ = $filter.attr('alt'),      imgSrc = $filter.attr('src');   if (imgSrc.indexOf('apply') == -1) {      $filter.attr('src', imgSrc.split('filter.png').join('apply-filter.png')).addClass('applied');      $filter.parent().addClass('filter-td-bg');   } else {      $filter.attr('src', imgSrc.split('apply-filter.png').join('filter.png')).removeClass('applied');      $filter.parent().removeClass('filter-td-bg');   }   aListSearch();}function bflFormFilterRemove(){   $('.filter-img[alt="filter"]').attr('src', 'media/img/base/filter.png').removeClass('applied');   $('.filter-td-bg').removeClass('filter-td-bg');   aListSearch();}function checkExtFilter(){    var $searchInput = $(':input.cookie-search-filter'),        $mainInput = $('.filter-input', '#search-filter-ext').children('input:first'),        terms = [],        activeFilters = 0;    $searchInput.each(function(){        var $this = $(this),            val   = $this.attr('value')        ;        if (val != '') {            $this.addClass('filter-is-active');            $this.val(conformSearchChars(val));            //Dropdown std [ja, nein] ansonsten in dem feld)            if ($this.is('select') === true) {               val = $this.find('option[value="' + val + '"]').text();            }            terms.push(val);            activeFilters++;        } else {            $this.removeClass('filter-is-active');        }    });    if (activeFilters > 0) {        $mainInput.addClass('filter-is-active').attr('value', conformSearchChars(terms.join(' / ')));        $('#start-search').attr({'src': 'media/img/base/editdelete.png', 'title' : 'Alle Suchkriterien entfernen'})        .unbind().click(function(){            $(':input.cookie-search-filter', '#ext-search').attr('value', '');            aListSearch();        });    } else {        $mainInput.removeClass('filter-is-active').attr('value', '');        $('#start-search').attr({'src': 'media/img/base/glass.png', 'title': 'Suche'});        $('#start-search').unbind().click(toggleExtSearchbar);    }}function toggleExtSearchbar(){    $('.toggle-ext-search').unbind();    $('#search-filter-ext').unbind();    var $searchDiv = $('#search-filter-ext'),        $extSearch = $('#ext-search'),        $mainInput = $('.filter-input', '#search-filter-ext').children('input:first'),        height = $searchDiv.height() || 0;    var itemCount = $('.cookie-search-filter', '#ext-search').size();    var calcHeight = 18 + (itemCount * 24) + 58;    if (height == 0) {        $mainInput.attr('disabled','disabled').addClass('disabled-input');        $searchDiv.animate({height:calcHeight}, 170, function(){        	   $(this).css('border-bottom', '1px solid #AAAAAA');        	   $extSearch.fadeIn(function(){                   var found = false;                   $('input.cookie-search-filter', $extSearch).each(function(){                       if ($(this).val().length > 0) {                           $(this).select();                           found = true;                           return;                       }                   });                   if (found === false) {                       $('input.cookie-search-filter:first', $extSearch).focus();                   }                $('html').click(function(e){                    if ( $(e.target).parents('#search-filter-ext').size() == 0 ) {                        toggleExtSearchbar();                        $('html').unbind('click');                    }                });            });        }).css('overflow', 'visible'); ;    } else if (height == calcHeight) {        $('html').unbind('click');        $extSearch.fadeOut(100, function(){            $searchDiv.animate({height:0}, 170, function(){            	$(this).css('border-bottom', 0);                $mainInput.removeAttr('disabled').removeClass('disabled-input').focus(toggleExtSearchbar);            }).css('overflow', 'visible');        });    }}function initAjaxPages(){   if (isTreeBfl() === false) {      $('select[name="entries"]').change(function(){          aChangeEntries();      });      $('img.page-arrow[alt="prev"]').click(function(){          aCheckPrevPage();      });      $('img.page-arrow[alt="next"]').click(function(){          aCheckNextPage();      });      $('img.page-arrow[alt="first"]').click(function(){    	  aCheckFirstPage();      });      $('img.page-arrow[alt="last"]').click(function(){    	  aCheckLastPage();      });   }}function aOrderList(btn){    var $sortBtn = $(btn),        sortType = $sortBtn.attr('class').split(' ')[1];    resetBtn();    aResetPage();    if (sortType == 'asc') {        $sortBtn.attr('src', $sortBtn.attr('src').split('asc').join('desc').split('deactive').join('active'));        $sortBtn.removeClass('asc').addClass('desc');     } else {        $sortBtn.attr('src', $sortBtn.attr('src').split('desc').join('asc').split('deactive').join('active'));        $sortBtn.removeClass('desc').addClass('asc');     }    aWriteCookie(btn);    aSendAjaxRequest();}function aListSearch(input){   checkExtFilter();   $('#cur_page').text(1);   $('#cur_page_bottom').text(1);   aWriteCookie(false, '');   aSendAjaxRequest();}function aChangeEntries(){    aWriteCookie();    aSendAjaxRequest();}function aCheckFirstPage(){	var curPage = parseInt($('#cur_page').text());	if(curPage != 1) {		$('#cur_page').text("1");		$('#cur_page_bottom').text("1");		aWriteCookie();	   aSendAjaxRequest();	}}function aCheckLastPage(){    var       curPage = parseInt($('#cur_page').text()),    	 maxPage = parseInt($('#max_page').text())    ;    if(curPage != maxPage) {        $('#cur_page').text(maxPage);        $('#cur_page_bottom').text(maxPage);        aWriteCookie();        aSendAjaxRequest();    }}function aCheckPrevPage(){    var curPage = parseInt($('#cur_page').text());    if(curPage > 1) {        $('#cur_page').text(curPage-1);        $('#cur_page_bottom').text(curPage-1);        aWriteCookie();        aSendAjaxRequest();    }}function aCheckNextPage(){    var curPage = parseInt($('#cur_page').text()),        maxPage = parseInt($('#max_page').text());    if(curPage < maxPage) {        $('#cur_page').text(curPage+1);        $('#cur_page_bottom').text(curPage+1);        aWriteCookie();        aSendAjaxRequest();    }}function aSendAjaxRequest(){    unbindBflFunctions();    $('.bfl-load').fadeIn('fast');    var       param   = {bfl : 'list'},       summary = $('table.bfl').attr('summary')    ;    $.each(       $('table.bfl').attr('class').split(/\s+/),       function(i, s){       if (strpos(s, 'feature-') === 0) {         param['feature'] = str_replace('feature-', '', s);       }       if (strpos(s, 'bflsub-') === 0) {          param['bflsub'] = str_replace('bflsub-', '', s);       }    });    if (summary !== undefined) {       try {          var additionalParam = JSON.parse(summary);       } catch (e) {          var additionalParam = {};       }       $.each(additionalParam, function(key, value){          param[key] = value;       });    }    //add additional bfl-data params if exists in tpl    if ($('input.bfl-data').size() > 0) {       $('input.bfl-data').each(function(i, el){          param[$(el).attr('name')] = $(el).attr('value'); //for request compatibility       });    }    $.ajax({        url : 'index.php?page=' + getPageInfo().page,        data : param,        type : 'post',        dataType : 'html',        success : function(data) {            var $tbl = $('table.bfl'),                $sDiv = $('#search-filter-ext'),                entries = data.match(/\d+/)[0],                data = data.slice(entries.length);            if ($sDiv.height() > 0) {                toggleExtSearchbar();                $('html').unbind();            }            $('tr:gt(0)', $tbl).remove();            $('tbody', $tbl).append(data);            $('.bfl-load').fadeOut('fast');            aUpdatePageList(entries);            resetBflFunctions();        },        dataFilter: function (data) {           checkSessionExpired(data, this);           return data;        }    });}function aUpdatePageList(count){   var      $max        = $('#max_page'),      $maxBottom  = $('#max_page_bottom'),      $cur        = $('#cur_page'),      $curBottom  = $('#cur_page_bottom'),      $entries    = $('select[name="entries"]')   ;   if (isTreeBfl() == true) {      $max.text('-');      $maxBottom.text('-');      $cur.text('-');      $curBottom.text('-');      $entries.attr('disabled', 'true');   } else {      $entries.removeAttr('disabled');      $filter = $('.bfl-count .filter');      if ($filter.length == 1) {         $tbl = $('table.bfl');         if ($tbl.find('.no_data').length == 0) {            $filter.text(count);         } else {            $filter.text(0);         }      }      var          cur     = parseInt($cur.text()),          count   = parseInt(count),          entries = parseInt($entries.attr('value'))      ;      var newMax = count/entries > parseInt(count/entries) ? parseInt(count/entries)+1 : count/entries;      $max.text(newMax);      $maxBottom.text(newMax);      if (cur > newMax) {         $cur.text(newMax);         $curBottom.text(newMax);      }   }}function aWriteCookie(btn, searchterm){    var        btn          = btn || false,        searchTerm   = searchterm === undefined ? true : searchterm,        $filters     = $('img.filter-img.applied', '#sidebar.bfl'),        filterForms  = new Array    ;    if ($filters.size() > 0) {       $filters.each(function(index, filter){          var $formFilter = $(filter),              filterClass  = $formFilter.attr('id').split('filter-img-').join('');          filterForms.push(filterClass);       });    }    if (btn !== false) {        var $sortBtn = $(btn),            order    = $sortBtn.attr('class').split(' ')[1],            tdClass  = $sortBtn.parent().attr('class').match(/cookie-([a-z_]+)/)[1],            newCookieArr = createFilterCookie(filterForms, getPageInfo().page, searchTerm, tdClass, '#content', order);    } else {        var newCookieArr = createFilterCookie(filterForms, getPageInfo().page, searchTerm);    }    document.cookie = (newCookieArr && newCookieArr.length > 0) ? ('filter=' + newCookieArr + ';') : ('filter=""; expires=Thu, 01-Jan-70 00:00:01 GMT;');}function aResetPage(){    $('#cur_page').text(1);    $('#cur_page_bottom').text(1);}