<?php/*
 * AlcedisMED
 * Copyright (C) 2010-2016  Alcedis GmbH
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */ 

class reportContentB03 extends reportExtensionB{   protected $_values = array();   public function init(alcReportPdf $renderer){      $renderer->addPage();   }   private function _initValues()   {      $percentArray = array(         'dignitaet'      => array('val' => array('alle', 'in_situ', 'maligne', 'sonstige', 'keine_angabe')),         'pt'             => array('val' => array('alle', 'pT0', 'pTis', 'pT1', 'pT1a', 'pT1b', 'pT1c', 'pT2', 'pT3', 'pT4', 'pT4a', 'pT4b', 'pT4c','pT4d','pTX', 'keine_angabe', 'keine_op')),         'pn'             => array('val' => array('alle', 'pN0', 'pN1','pN1mi', 'pN1a', 'pN1b', 'pN1c', 'pN2', 'pN2a', 'pN2b','pN3','pN3a','pN3b','pN3c', 'pNX', 'keine_angabe', 'keine_op')),         'm'              => array('val' => array('alle', 'M0', 'M1', 'M1a', 'M1b', 'MX', 'keine_angabe')),         'g'              => array('val' => array('alle', 'gX', 'g1', 'g2', 'g3', 'keine_angabe')),         'sln'            => array('val' => array('alle_sln', 'technetium')),         'detektion1'     => array('val' => array('alle_sln_node', 'alle_bef_sln')),         'detektion2'     => array('val' => array('alle_sln_tech', 'sln_bef_tech')),         'detektion3'     => array('val' => array('alle_sln_blau', 'sln_bef_blau')),         'nodal'          => array('val' => array('nodalstatus', 'slne_durchgefuehrt', 'slne_positiv', 'axilladesektion', 'axilladesektion_10')),         'resektionss'    => array('val' => array('r0', 'r1')),         'r0_resektion'   => array('val' => array('r0', 'r0_1', 'r0_2', 'r0_3', 'r0_g')),         'chemo_b'               => array('val' => array()),         'chemo_b_indikation'    => array('val' => array()),         'schnellschnitt' => array(            'val'    => array('alle_schnell', 'gr30', 'kl30'),            'min'    => array('alle_schnell' => '-', 'gr30' => '-', 'kl30' => '-'),            'max'    => array('alle_schnell' => '-', 'gr30' => '-', 'kl30' => '-'),            'range'  => array('alle_schnell' => '-', 'gr30' => '-', 'kl30' => '-')         ),         'pathobericht'   => array('val' => array('patho_alle', 'patho_ptpn', 'patho_pm', 'patho_morpho', 'patho_g', 'patho_lv', 'patho_er_pr', 'patho_her2')),         'her2' => array('val' => array('alle_her2', 'her2_n', 'her2_1', 'her2_2', 'her2_3')),         'operateure' => array(            'val'                   => array(),            'op_operateur'          => array(),            'op_assi'               => array(),            'op_prim_gesamt'        => array(),            'op_prim_operateur'     => array(),            'op_prim_assi'          => array(),            'op_rekonst_gesamt'     => array(),            'op_rekonst_operateur'  => array(),            'op_rekonst_assi'       => array()         ),         'str_50' => array(            'str_k50'   => array(),            'str_g50'   => array(),            'val'       => array(),            'str_ka50'  => array()         ),         'str_10' => array(            'str_k10'   => array(),            'str_g10'   => array(),            'val'       => array(),            'str_ka10'  => array()         ),         'str_18' => array(            'str_k18'   => array(),            'str_g18'   => array(),            'val'       => array(),            'str_ka18'  => array()         )      );      $this         ->_initPercentArray($percentArray)      ;      return $this;   }   public function generate(alcReportPdf $renderer)   {      $renderer->setConfig($this->loadConfigs('b03', false, true));      $dataCache  = array();      $additionalContent = array();      $additionalContent['selects'] = array(         "(SELECT ts.her2 FROM tumorstatus ts WHERE ts.erkrankung_id = t.erkrankung_id AND ts.diagnose_seite IN ('B', t.diagnose_seite) AND ts.anlass = t.anlass AND (ts.her2_methode IS NOT NULL AND ts.her2_methode != 'pcr') ORDER BY ts.datum_sicherung DESC, ts.sicherungsgrad ASC, ts.datum_beurteilung DESC LIMIT 1) AS her2_methode_b03",         "(SELECT ts.datum_sicherung FROM tumorstatus ts WHERE ts.erkrankung_id = t.erkrankung_id AND ts.diagnose_seite IN ('B', t.diagnose_seite) AND ts.anlass = t.anlass AND ts.r_lokal IS NOT NULL ORDER BY ts.datum_sicherung DESC, ts.sicherungsgrad ASC, ts.datum_beurteilung DESC LIMIT 1) AS r_lokal_datum",      );      $additionalContent['fields'] = array(         "sit.patient_id",         "sit.her2_methode_b03",         "sit.r_lokal",         "sit.r_lokal_datum",         "GROUP_CONCAT(            DISTINCT IF(               s.form = 'eingriff' AND SUBSTRING(s.report_param, 3, 1) IN ('B', sit.diagnose_seite),               (SELECT eo.eingriff_id FROM eingriff_ops eo                WHERE                    eo.eingriff_id = s.form_id AND eo.prozedur_seite IN ('B', sit.diagnose_seite) AND                    (LOCATE('5-401.11', eo.prozedur) != 0 OR                     LOCATE('5-401.12.', eo.prozedur) != 0                     )                GROUP BY                    eo.eingriff_id               ),               NULL            )          ) AS 'sln_biopsie_eingriff_ids'",         "         IF(            sit.r_lokal_datum IS NOT NULL,            COUNT(                IF(                    op.datum <= sit.r_lokal_datum AND 1 IN (op.art_primaertumor, op.art_rezidiv, op.art_nachresektion),                    1,                    NULL                )            ),            NULL         ) AS 'r0_resektion'",         "COUNT(DISTINCT IF(op.schnellschnitt = '1', op.eingriff_id, NULL))   AS 'schnellschnitt_anz'",         "MIN(IF(op.schnellschnitt = '1', op.schnellschnitt_dauer, NULL))     AS 'schnellschnitt_min'",         "MAX(IF(op.schnellschnitt = '1', op.schnellschnitt_dauer, NULL))     AS 'schnellschnitt_max'",         "COUNT(DISTINCT IF(op.schnellschnitt = '1' AND op.schnellschnitt_dauer IS NOT NULL AND op.schnellschnitt_dauer > 30, op.eingriff_id, NULL))   AS 'schnellschnitt_gr30'",         "MIN(IF(op.schnellschnitt = '1' AND op.schnellschnitt_dauer IS NOT NULL AND op.schnellschnitt_dauer > 30, op.schnellschnitt_dauer, NULL)) AS 'schnellschnitt_gr30_min'",         "MAX(IF(op.schnellschnitt = '1' AND op.schnellschnitt_dauer IS NOT NULL AND op.schnellschnitt_dauer > 30, op.schnellschnitt_dauer, NULL)) AS 'schnellschnitt_gr30_max'",         "COUNT(DISTINCT IF(op.schnellschnitt = '1' AND op.schnellschnitt_dauer IS NOT NULL AND op.schnellschnitt_dauer <= 30, op.eingriff_id, NULL))   AS 'schnellschnitt_kl30'",         "MIN(IF(op.schnellschnitt = '1' AND op.schnellschnitt_dauer IS NOT NULL AND op.schnellschnitt_dauer <= 30, op.schnellschnitt_dauer, NULL)) AS 'schnellschnitt_kl30_min'",         "MAX(IF(op.schnellschnitt = '1' AND op.schnellschnitt_dauer IS NOT NULL AND op.schnellschnitt_dauer <= 30, op.schnellschnitt_dauer, NULL)) AS 'schnellschnitt_kl30_max'",          "GROUP_CONCAT(IF(op.eingriff_id IS NOT NULL AND op.sln_markierung IS NOT NULL, CONCAT_WS('|', op.eingriff_id, op.sln_markierung), NULL)) AS 'biopsie_eingriffe_markierung'",          "GROUP_CONCAT(DISTINCT IF(h.eingriff_id IS NOT NULL AND (h.lk_sentinel_bef IS NOT NULL AND h.lk_sentinel_bef > 0), h.eingriff_id, NULL)) AS 'sln_bef_histologien'",          "GROUP_CONCAT(DISTINCT IF(h.eingriff_id IS NOT NULL AND (h.lk_entf IS NOT NULL AND h.lk_entf >= 10), h.eingriff_id, NULL)) AS 'lk_entf_histologien'",          "GROUP_CONCAT(            DISTINCT IF(               s.form = 'eingriff' AND SUBSTRING(s.report_param, 3, 1) IN ('B', sit.diagnose_seite),               (SELECT eo.eingriff_id FROM eingriff_ops eo                    WHERE                        eo.eingriff_id = s.form_id AND eo.prozedur_seite IN ('B', sit.diagnose_seite) AND                        (LOCATE('5-871', eo.prozedur) != 0 OR                        LOCATE('5-873', eo.prozedur) != 0 OR                        LOCATE('5-402.1', eo.prozedur) != 0 OR                        LOCATE('5-406.1', eo.prozedur) != 0 OR                        LOCATE('5-875.0', eo.prozedur) != 0 OR                        LOCATE('5-875.1', eo.prozedur) != 0 OR                        LOCATE('5-875.2', eo.prozedur) != 0)                    GROUP BY                        eo.eingriff_id               ),               NULL            )         ) AS 'axilla_desektion_eingriff_ids'",         "COUNT(DISTINCT IF(h.art = 'po', h.histologie_id, NULL)) AS 'histo_anzahl'",         "COUNT(DISTINCT IF(h.art = 'po' AND h.pt IS NOT NULL AND h.pn IS NOT NULL, h.histologie_id, NULL)) AS 'histo_ptpn_anzahl'",         "COUNT(DISTINCT IF(h.art = 'po' AND h.pm IS NOT NULL, h.histologie_id, NULL)) AS 'histo_pm_anzahl'",         "COUNT(DISTINCT IF(h.art = 'po' AND (h.morphologie IS NOT NULL OR h.dcis_morphologie IS NOT NULL), h.histologie_id, NULL)) AS 'histo_morpho_anzahl'",         "COUNT(DISTINCT IF(h.art = 'po' AND (h.g IS NOT NULL OR h.dcis_grading IS NOT NULL), h.histologie_id, NULL)) AS 'histo_g_anzahl'",         "COUNT(DISTINCT IF(h.art = 'po' AND h.l IS NOT NULL AND h.v IS NOT NULL, h.histologie_id, NULL)) AS 'histo_lv_anzahl'",         "COUNT(DISTINCT IF(h.art = 'po' AND h.estro_urteil IS NOT NULL AND h.prog_urteil IS NOT NULL, h.histologie_id, NULL)) AS 'histo_er_pr_anzahl'",         "COUNT(DISTINCT IF(h.art = 'po' AND h.her2_urteil IS NOT NULL, h.histologie_id, NULL)) AS 'histo_her2_anzahl'",         "GROUP_CONCAT(IF(th_str.strahlentherapie_id IS NOT NULL, CONCAT_WS('|', th_str.strahlentherapie_id, IF(th_str.gesamtdosis IS NOT NULL, th_str.gesamtdosis, 'ka')), NULL))    AS 'str_gesamt'",         "GROUP_CONCAT(IF(th_str.strahlentherapie_id IS NOT NULL, CONCAT_WS('|', th_str.strahlentherapie_id, IF(th_str.einzeldosis IS NOT NULL, th_str.einzeldosis, 'ka')), NULL))    AS 'str_einzel'",         "GROUP_CONCAT(IF(th_str.strahlentherapie_id IS NOT NULL, CONCAT_WS('|', th_str.strahlentherapie_id, IF(th_str.boostdosis IS NOT NULL, th_str.boostdosis, 'ka')),  NULL))     AS 'str_boost'"      );      $data         = $this->loadRessource('b01', $additionalContent);      $this->_count = count($data);      $this->_initValues();      $strahlenData = array(         'str_50' => array('count' => array(),'k' => array(),'e' => array(),'g' => array(),'ka' => array()),         'str_10' => array('count' => array(),'k' => array(),'e' => array(),'g' => array(),'ka' => array()),         'str_18' => array('count' => array(),'k' => array(),'e' => array(),'g' => array(),'ka' => array())      );      foreach ($data as $dataset)      {         $diagnose = substr($dataset['diagnose'], 0,3);         //Strahlentherapien Boost / Gesamtherd         foreach (array('gesamt' => 50, 'boost' => 10) as $sec => $stVal) {            if (strlen($dataset["str_{$sec}"]) > 0) {               $gesamt = explode(',', $dataset["str_{$sec}"]);               foreach ($gesamt as $val) {                  $c = explode('|', $val);                  $strahlentherapieId = reset($c);                  $v = end($c);                  $strahlenData["str_{$stVal}"]['count'][$strahlentherapieId] = 1;                  switch (true) {                     case ($v == 'ka'): $strahlenData["str_{$stVal}"]['ka'][$strahlentherapieId] = 1; break;                     case ($v == $stVal): $strahlenData["str_{$stVal}"]['e'][$strahlentherapieId] = 1; break;                     case ($v < $stVal): $strahlenData["str_{$stVal}"]['k'][$strahlentherapieId] = 1; break;                     case ($v > $stVal): $strahlenData["str_{$stVal}"]['g'][$strahlentherapieId] = 1; break;                  }               }            }         }         //Sonderfall einzeldosis         if (strlen($dataset['str_einzel']) > 0) {            $gesamt = explode(',', $dataset['str_einzel']);            foreach ($gesamt as $val) {               $c = explode('|', $val);               $strahlentherapieId = reset($c);               $v = end($c);               $strahlenData['str_18']['count'][$strahlentherapieId] = 1;               switch (true) {                  case ($v == 'ka'):   $strahlenData['str_18']['ka'][$strahlentherapieId] = 1; break;                  case ($v < 1.8):     $strahlenData['str_18']['k'][$strahlentherapieId] = 1; break;                  case ($v > 2):       $strahlenData['str_18']['g'][$strahlentherapieId] = 1; break;                  default:             $strahlenData['str_18']['e'][$strahlentherapieId] = 1; break;               }            }         }         //Dignitaet         $this->_values['dignitaet']['count']++;         $this->_values['dignitaet']['val']['alle']++;         $this->_values['dignitaet']['val']['in_situ'] += (int) (substr($dataset['icd_o_3'], -2) == '/2');         $this->_values['dignitaet']['val']['maligne'] += (int) (substr($dataset['icd_o_3'], -2) == '/3');         $this->_values['dignitaet']['val']['sonstige'] += (int) (strlen($dataset['icd_o_3']) > 0 && in_array(substr($dataset['icd_o_3'], -2), array('/2', '/3')) === false);         $this->_values['dignitaet']['val']['keine_angabe'] += (int) (strlen($dataset['icd_o_3']) == 0);         //pt         $this->_values['pt']['count']++;         $this->_values['pt']['val']['alle']++;         $this->_values['pt']['val']['pT0']           += (int) ($dataset['pt'] == 'pT0');         $this->_values['pt']['val']['pTis']          += (int) ($dataset['pt'] == 'pTis');         $this->_values['pt']['val']['pT1']           += (int) ($dataset['pt'] == 'pT1');         $this->_values['pt']['val']['pT1a']           += (int) ($dataset['pt'] == 'pT1a');         $this->_values['pt']['val']['pT1b']           += (int) ($dataset['pt'] == 'pT1b');         $this->_values['pt']['val']['pT1c']           += (int) ($dataset['pt'] == 'pT1c');         $this->_values['pt']['val']['pT2']           += (int) ($dataset['pt'] == 'pT2');         $this->_values['pt']['val']['pT3']           += (int) ($dataset['pt'] == 'pT3');         $this->_values['pt']['val']['pT4']           += (int) ($dataset['pt'] == 'pT4');         $this->_values['pt']['val']['pT4a']          += (int) ($dataset['pt'] == 'pT4a');         $this->_values['pt']['val']['pT4b']          += (int) ($dataset['pt'] == 'pT4b');         $this->_values['pt']['val']['pT4c']          += (int) ($dataset['pt'] == 'pT4c');         $this->_values['pt']['val']['pT4d']          += (int) ($dataset['pt'] == 'pT4d');         $this->_values['pt']['val']['pTX']           += (int) ($dataset['pt'] == 'pTX');         $this->_values['pt']['val']['keine_angabe']  += (int) (strlen($dataset['pt']) == 0);         $this->_values['pt']['val']['keine_op']      += (int) (strlen($dataset['pt']) == 0 && strlen($dataset['opsprimaer_op']) == 0);         //pn         $this->_values['pn']['count']++;         $this->_values['pn']['val']['alle']++;         $this->_values['pn']['val']['pN0']           += (int) ($dataset['pn'] == 'pN0');         $this->_values['pn']['val']['pN1']           += (int) ($dataset['pn'] == 'pN1');         $this->_values['pn']['val']['pN1mi']         += (int) ($dataset['pn'] == 'pN1mi');         $this->_values['pn']['val']['pN1a']          += (int) ($dataset['pn'] == 'pN1a');         $this->_values['pn']['val']['pN1b']          += (int) ($dataset['pn'] == 'pN1b');         $this->_values['pn']['val']['pN1c']          += (int) ($dataset['pn'] == 'pN1c');         $this->_values['pn']['val']['pN2']           += (int) ($dataset['pn'] == 'pN2');         $this->_values['pn']['val']['pN2a']          += (int) ($dataset['pn'] == 'pN2a');         $this->_values['pn']['val']['pN2b']          += (int) ($dataset['pn'] == 'pN2b');         $this->_values['pn']['val']['pN3']           += (int) ($dataset['pn'] == 'pN3');         $this->_values['pn']['val']['pN3a']          += (int) ($dataset['pn'] == 'pN3a');         $this->_values['pn']['val']['pN3b']          += (int) ($dataset['pn'] == 'pN3b');         $this->_values['pn']['val']['pN3c']          += (int) ($dataset['pn'] == 'pN3c');         $this->_values['pn']['val']['pNX']           += (int) ($dataset['pn'] == 'pNX');         $this->_values['pn']['val']['keine_angabe']  += (int) (strlen($dataset['pn']) == 0);         $this->_values['pn']['val']['keine_op']      += (int) (strlen($dataset['pn']) == 0 && strlen($dataset['opsprimaer_op']) == 0);         //m         $this->_values['m']['count']++;         $this->_values['m']['val']['alle']++;         $this->_values['m']['val']['M0']             += (int) (substr($dataset['m'], 1) == 'M0');         $this->_values['m']['val']['M1']             += (int) (substr($dataset['m'], 1) == 'M1');         $this->_values['m']['val']['M1a']            += (int) (substr($dataset['m'], 1) == 'M1a');         $this->_values['m']['val']['M1b']            += (int) (substr($dataset['m'], 1) == 'M1b');         $this->_values['m']['val']['MX']             += (int) (substr($dataset['m'], 1) == 'MX');         $this->_values['m']['val']['keine_angabe']   += (int) (strlen($dataset['m']) == 0);         //g         $this->_values['g']['count']++;         $this->_values['g']['val']['alle']++;         $this->_values['g']['val']['gX']             += (int) ($dataset['g'] == 'X');         $this->_values['g']['val']['g1']             += (int) ($dataset['g'] == '1');         $this->_values['g']['val']['g2']             += (int) ($dataset['g'] == '2');         $this->_values['g']['val']['g3']             += (int) ($dataset['g'] == '3');         $this->_values['g']['val']['keine_angabe']   += (int) (strlen($dataset['g']) == 0);         //Detektionsrate         if (strlen($dataset['sln_biopsie_eingriff_ids']) > 0) {            $slnBiopsen = explode(',', $dataset['sln_biopsie_eingriff_ids']);            $this->_values['sln']['count']            += (int) count($slnBiopsen);            $this->_values['sln']['val']['alle_sln']  += (int) count($slnBiopsen);            $this->_values['detektion1']['count']                 += (int) count($slnBiopsen);            $this->_values['detektion1']['val']['alle_sln_node']  += (int) count($slnBiopsen);            if (strlen($dataset['biopsie_eingriffe_markierung']) > 0) {               foreach (explode(',', $dataset['biopsie_eingriffe_markierung']) AS $eingriff) {                  $eingriffData = explode('|', $eingriff);                  //Technetium                  if (in_array(reset($eingriffData), $slnBiopsen) === true && in_array(end($eingriffData), array('99', '99bm')) === true) {                     $this->_values['sln']['val']['technetium']++;                     $this->_values['detektion2']['val']['alle_sln_tech']++;                     $this->_values['detektion2']['count']++;                     //Detektion 2                     if (strlen($dataset['sln_bef_histologien']) > 0) {                        $befSLNHistologien = explode(',', $dataset['sln_bef_histologien']);                        foreach ($befSLNHistologien as $eingriff_id) {                           if ($eingriff_id == reset($eingriffData)) {                              $this->_values['detektion2']['val']['sln_bef_tech']++;                           }                        }                     }                  }                  //Blau Markierung                  if (in_array(reset($eingriffData), $slnBiopsen) === true && in_array(end($eingriffData), array('bm', '99bm')) === true) {                     $this->_values['detektion3']['count']++;                     $this->_values['detektion3']['val']['alle_sln_blau']++;                     //Detektion 3                     if (strlen($dataset['sln_bef_histologien']) > 0) {                        $befSLNHistologien = explode(',', $dataset['sln_bef_histologien']);                        foreach ($befSLNHistologien as $eingriff_id) {                           if ($eingriff_id == reset($eingriffData)) {                              $this->_values['detektion3']['val']['sln_bef_blau']++;                           }                        }                     }                  }               }            }            if (strlen($dataset['sln_bef_histologien']) > 0) {               $befSLNHistologien = explode(',', $dataset['sln_bef_histologien']);               foreach ($befSLNHistologien as $histo) {                  if (in_array($histo, $slnBiopsen) === true) {                     $this->_values['detektion1']['val']['alle_bef_sln']++;                  }               }            }         }         //Nodal         if ((int) $dataset['anz_ops'] >= 1 && $diagnose == 'C50') {            $this->_values['nodal']['val']['nodalstatus']         += (int) (strlen($dataset['pn']) > 0 && $dataset['pn'] != 'pNX');            $this->_values['nodal']['val']['slne_durchgefuehrt']  += (int) (strlen($dataset['slnentfernt']) > 0 && $dataset['slnentfernt'] > 0);            $this->_values['nodal']['val']['slne_positiv']        += (int) (strlen($dataset['slnbefallen']) > 0 && $dataset['slnbefallen'] > 0 ||                                                                            strlen($dataset['slnentfernt']) > 0 && $dataset['slnentfernt'] == 0);            if (strlen($dataset['axilla_desektion_eingriff_ids']) > 0) {               $axillaDesektionEingriffIds = explode(',', $dataset['axilla_desektion_eingriff_ids']);               $this->_values['nodal']['val']['axilladesektion']     += (int) count($axillaDesektionEingriffIds);               if (strlen($dataset['lk_entf_histologien']) > 0) {                  $lkEntfHisto = explode(',', $dataset['lk_entf_histologien']);                  foreach ($axillaDesektionEingriffIds as $axillaDissektionEingriffId) {                     if (in_array($axillaDissektionEingriffId, $lkEntfHisto) === true) {                        $this->_values['nodal']['val']['axilladesektion_10']++;                     }                  }               }            }         }         //Resektionsstadium         if (strlen($dataset['r_lokal']) > 0) {           $this->_values['resektionss']['val']['r0'] += (int) ($dataset['r_lokal'] == '0');           $this->_values['resektionss']['val']['r1'] += (int) ($dataset['r_lokal'] == '1');         }         //r0 und so         if (strlen($dataset['datumprimaer_op']) > 0 && strlen($dataset['r_lokal']) > 0 && $dataset['r_lokal'] == '0') {            $this->_values['r0_resektion']['val']['r0']++;            if (strlen($dataset['r0_resektion']) > 0) {               $this->_values['r0_resektion']['val']['r0_1'] +=  $dataset['r0_resektion'] == '1' ? 1 : 0;               $this->_values['r0_resektion']['val']['r0_2'] +=  $dataset['r0_resektion'] == '2' ? 1 : 0;               $this->_values['r0_resektion']['val']['r0_3'] +=  $dataset['r0_resektion'] == '3' ? 1 : 0;               $this->_values['r0_resektion']['val']['r0_g'] +=  $dataset['r0_resektion'] > 3 ? 1 : 0;            }         }         //Schnellschnitt         $this->_values['schnellschnitt']['count']                += (int) $dataset['schnellschnitt_anz'];         $this->_values['schnellschnitt']['val']['alle_schnell']  += (int) $dataset['schnellschnitt_anz'];         $this->_values['schnellschnitt']['min']['alle_schnell']     = $this->_insert('min', $this->_values['schnellschnitt']['min']['alle_schnell'], $dataset['schnellschnitt_min']);         $this->_values['schnellschnitt']['max']['alle_schnell']     = $this->_insert('max', $this->_values['schnellschnitt']['max']['alle_schnell'], $dataset['schnellschnitt_max']);         $this->_values['schnellschnitt']['range']['alle_schnell']   = $this->_insert('range', $this->_values['schnellschnitt']['max']['alle_schnell'], $this->_values['schnellschnitt']['min']['alle_schnell']);         $this->_values['schnellschnitt']['val']['gr30']    += (int) $dataset['schnellschnitt_gr30'];         $this->_values['schnellschnitt']['min']['gr30']     = $this->_insert('min', $this->_values['schnellschnitt']['min']['gr30'], $dataset['schnellschnitt_gr30_min']);         $this->_values['schnellschnitt']['max']['gr30']     = $this->_insert('max', $this->_values['schnellschnitt']['max']['gr30'], $dataset['schnellschnitt_gr30_max']);         $this->_values['schnellschnitt']['range']['gr30']   = $this->_insert('range', $this->_values['schnellschnitt']['max']['gr30'], $this->_values['schnellschnitt']['min']['gr30']);         $this->_values['schnellschnitt']['val']['kl30']    += (int) $dataset['schnellschnitt_kl30'];         $this->_values['schnellschnitt']['min']['kl30']     = $this->_insert('min', $this->_values['schnellschnitt']['min']['kl30'], $dataset['schnellschnitt_kl30_min']);         $this->_values['schnellschnitt']['max']['kl30']     = $this->_insert('max', $this->_values['schnellschnitt']['max']['kl30'], $dataset['schnellschnitt_kl30_max']);         $this->_values['schnellschnitt']['range']['kl30']   = $this->_insert('range', $this->_values['schnellschnitt']['max']['kl30'], $this->_values['schnellschnitt']['min']['kl30']);         //Pathobericht         $this->_values['pathobericht']['count']                  += (int) $dataset['histo_anzahl'];         $this->_values['pathobericht']['val']['patho_alle']      += (int) $dataset['histo_anzahl'];         $this->_values['pathobericht']['val']['patho_ptpn']      += (int) $dataset['histo_ptpn_anzahl'];         $this->_values['pathobericht']['val']['patho_pm']        += (int) $dataset['histo_pm_anzahl'];         $this->_values['pathobericht']['val']['patho_morpho']    += (int) $dataset['histo_morpho_anzahl'];         $this->_values['pathobericht']['val']['patho_g']         += (int) $dataset['histo_g_anzahl'];         $this->_values['pathobericht']['val']['patho_lv']        += (int) $dataset['histo_lv_anzahl'];         $this->_values['pathobericht']['val']['patho_er_pr']     += (int) $dataset['histo_er_pr_anzahl'];         $this->_values['pathobericht']['val']['patho_her2']      += (int) $dataset['histo_her2_anzahl'];         //Her2         if (strlen($dataset['her2_methode_b03']) > 0) {            $this->_values['her2']['count']++;            $this->_values['her2']['val']['alle_her2']++;            $this->_values['her2']['val']['her2_n'] += (int) ($dataset['her2_methode_b03'] == 'n');            $this->_values['her2']['val']['her2_1'] += (int) ($dataset['her2_methode_b03'] == '1');            $this->_values['her2']['val']['her2_2'] += (int) ($dataset['her2_methode_b03'] == '2');            $this->_values['her2']['val']['her2_3'] += (int) ($dataset['her2_methode_b03'] == '3');         }      }      $operateure      = $this->loadRessource('operateure');      $operateurData   = array();      foreach ($operateure as $dataset) {         if (strlen($dataset['operateure']) > 0) {            $art            = explode('|', $dataset['operateure']);            $eingriffId     = $dataset['eingriff_id'];            $primOp         = $art[0];            $op1            = $art[1];            $op2            = $art[2];            $rekonstruktion = (strlen($dataset['rekonstruktion']) > 0 ? 1 : 0);            $operateure = array($op1, $op2);            //$x = 0 == 1.Operateur / $x = 1 == Assistenz            foreach ($operateure as $x => $operateur) {               if (strlen($operateur) > 0) {                 if (array_key_exists($operateur, $operateurData) === false) {                    $operateurData[$operateur] = $this->_buildOpArray();                 }                 $operateurData[$operateur]['val'][$eingriffId] = 1;                 if ($x == 0) {                    $operateurData[$operateur]['op_operateur'][$eingriffId] = 1;                 } else {                    $operateurData[$operateur]['op_assi'][$eingriffId] = 1;                 }                 if ($primOp == 1) {                    $operateurData[$operateur]['op_prim_gesamt'][$eingriffId] = 1;                    if ($x == 0) {                       $operateurData[$operateur]['op_prim_operateur'][$eingriffId] = 1;                    } else {                       $operateurData[$operateur]['op_prim_assi'][$eingriffId] = 1;                    }                 }                 if ($rekonstruktion == 1) {                    $operateurData[$operateur]['op_rekonst_gesamt'][$eingriffId] = 1;                    if ($x == 0) {                       $operateurData[$operateur]['op_rekonst_operateur'][$eingriffId] = 1;                    } else {                       $operateurData[$operateur]['op_rekonst_assi'][$eingriffId] = 1;                    }                 }               }            }         }      }      //Zuweisung Operateure      foreach ($operateurData as $arzt => $op) {         $this->_values['operateure']['val'][$arzt]               = count($op['val']);         $this->_values['operateure']['op_operateur'][]           = count($op['op_operateur']);         $this->_values['operateure']['op_assi'][]                = count($op['op_assi']);         $this->_values['operateure']['op_prim_gesamt'][]         = count($op['op_prim_gesamt']);         $this->_values['operateure']['op_prim_operateur'][]      = count($op['op_prim_operateur']);         $this->_values['operateure']['op_prim_assi'][]           = count($op['op_prim_assi']);         $this->_values['operateure']['op_rekonst_gesamt'][]      = count($op['op_rekonst_gesamt']);         $this->_values['operateure']['op_rekonst_operateur'][]   = count($op['op_rekonst_operateur']);         $this->_values['operateure']['op_rekonst_assi'][]        = count($op['op_rekonst_assi']);      }      //Chemotherapien      $chemotherapien = $this->loadRessource('chemotherapien');      foreach ($chemotherapien AS $chemoTherapy) {         $org = $chemoTherapy['org_id'];         $bDisease = $chemoTherapy['b'];         $this->_values['chemo_b']['val'][$org] = isset($this->_values['chemo_b']['val'][$org]) === true            ? $this->_values['chemo_b']['val'][$org] + 1            : 1         ;         if ($bDisease == '1') {             $this->_values['chemo_b_indikation']['val'][$org] = isset($this->_values['chemo_b_indikation']['val'][$org]) === true                ? $this->_values['chemo_b_indikation']['val'][$org] + 1                : 1             ;         }      }      //Strahlentherapien zuweisen      foreach (array(50, 18, 10) as $th) {         $this->_values["str_{$th}"]['count'] = count($strahlenData["str_{$th}"]['count']);         $this->_values["str_{$th}"]["str_k{$th}"][] = count($strahlenData["str_{$th}"]['k']);         $this->_values["str_{$th}"]["str_g{$th}"][] = count($strahlenData["str_{$th}"]['g']);         $this->_values["str_{$th}"]["str_ka{$th}"][] = count($strahlenData["str_{$th}"]['ka']);         $this->_values["str_{$th}"]['val'][] = count($strahlenData["str_{$th}"]['e']);      }      require_once 'reports/pdf/b/b03/p1.php';      require_once 'reports/pdf/b/b03/p2.php';      require_once 'reports/pdf/b/b03/p3.php';   }   private function _buildOpArray()   {      return array(         'val'                   => array(),         'op_operateur'          => array(),         'op_assi'               => array(),         'op_prim_gesamt'        => array(),         'op_prim_operateur'     => array(),         'op_prim_assi'          => array(),         'op_rekonst_gesamt'     => array(),         'op_rekonst_operateur'  => array(),         'op_rekonst_assi'       => array()      );   }   private function _insert($type, $src, $value, $default = '-')   {      $val = $src !== $default ? $src : $default;      switch ($type) {         case 'range':            if (is_int($src) == true && is_int($value) == true) {               $val = $src - $value;            }            break;         case 'max':         case 'min':            if (strlen($value) > 0) {               $value   = (int) $value;               $src     = $src !== $default ? $src : (                  $type == 'min' ? $value : 0               );               $compare = false;               eval('$compare = $type == "max" ? ($value >= $src) : ($value <= $src);');               if ($compare == true) {                  $val = $value;               }            } else {               $val = $src;            }            break;      }      return $val;   }}?>