<?php/*
 * AlcedisMED
 * Copyright (C) 2010-2016  Alcedis GmbH
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */ 

class reportContentOz04 extends reportExtensionOz{    private $_patientDatasets    = array();    protected $_values           = array();    protected $_activeTypes      = array();    /**     * report init     *     * @param $renderer     */    public function init($renderer){        if ($this->_params['name'] == 'oz04') {            $renderer->addPage('L');        }    }    /**     * init values     *     */    private function _initValues()    {        $percentArray = array(           'losttofu' => array('val' => array('losttofu'))        );        $this            ->_initPercentArray($percentArray)        ;        $losttofu = $this->_values['losttofu'];        unset($this->_values['losttofu']);        foreach (array_keys($this->_diagnosen) as $type) {           $this->_values['041'][$type] = array('type' => 'pt', 'range' => array(), 'event' => array(), 'legend' => array());           $this->_values['042'][$type] = array('type' => 'pt', 'range' => array(), 'event' => array(), 'legend' => array());           $this->_values['043'][$type] = array('type' => 'pt', 'range' => array(), 'event' => array(), 'legend' => array());           $this->_values['044'][$type] = array('type' => 'pt', 'range' => array(), 'event' => array(), 'legend' => array());           $this->_values['045'][$type] = array('range' => array(), 'event' => array());           $this->_values['losttofu'][$type] = $losttofu;        }    }    /**     *     * generate     * @param $renderer     */    public function generate($renderer)    {        $config = $this->loadConfigs('oz04', false, true);        if ($this->_params['name'] == 'oz04') {            $renderer->setConfig($config);        }        $this->_initValues();        $additionalContent['joins'] = array(            "LEFT JOIN `status` snachsorge ON snachsorge.patient_id = sit.patient_id AND snachsorge.form = 'nachsorge' AND LOCATE(CONCAT_WS('','-',sit.erkrankung_id,'-'), s.report_param) > 0",                "LEFT JOIN nachsorge nnachsorge ON nnachsorge.nachsorge_id = snachsorge.form_id"        );        $additionalContent['selects'] = array(            "MAX(t2.datum_sicherung) AS 'lastTumorstatus'",            "MIN(IF(LEFT(t2.anlass, 1) = 'r', t2.datum_sicherung, NULL)) AS 'datum_sicherung_rezidiv'",            "MIN(IF(LEFT(t2.anlass, 1) = 'r' AND (t2.rezidiv_lokal = 1 OR t2.rezidiv_lk = 1), t2.datum_sicherung, NULL)) AS 'datum_sicherung_rezidiv_lokal'",            "MIN(IF(LEFT(t2.anlass, 1) = 'r' AND t2.rezidiv_metastasen = 1, t2.datum_sicherung, NULL)) AS 'datum_sicherung_rezidiv_metast'"        );        $additionalContent['fields'] = array(            "sit.patient_id",            "UNIX_TIMESTAMP(                IFNULL(                    MIN(IF(s.form = 'eingriff' AND LEFT(s.report_param, 1) = '1', s.form_date, NULL)),                    MIN(h.datum)                )            )                                                           AS 'h_beginn'",            "IF(MAX(x.todesdatum) IS NOT NULL, 1, 0)                    AS '041_ereignis'",            "IF(                MAX(x.todesdatum) IS NOT NULL,                UNIX_TIMESTAMP(MAX(x.todesdatum)),                CONCAT_WS('|',                    UNIX_TIMESTAMP(MAX(sit.lastTumorstatus)),                    UNIX_TIMESTAMP(MAX(nnachsorge.datum))                )            )                                                           AS '041_ende'",            "IF(sit.datum_sicherung_rezidiv IS NOT NULL, 1, 0)          AS '042_ereignis'",            "IF(                sit.datum_sicherung_rezidiv IS NOT NULL,                UNIX_TIMESTAMP(sit.datum_sicherung_rezidiv),                CONCAT_WS('|',                    UNIX_TIMESTAMP(MAX(x.todesdatum)),                    UNIX_TIMESTAMP(MAX(sit.lastTumorstatus)),                    UNIX_TIMESTAMP(MAX(nnachsorge.datum))                )            )                                                           AS '042_ende'",            "IF(sit.datum_sicherung_rezidiv_lokal IS NOT NULL, 1, 0)    AS '043_ereignis'",            "IF(                sit.datum_sicherung_rezidiv_lokal IS NOT NULL,                UNIX_TIMESTAMP(sit.datum_sicherung_rezidiv_lokal),                CONCAT_WS('|',                    UNIX_TIMESTAMP(MAX(x.todesdatum)),                    UNIX_TIMESTAMP(MAX(sit.lastTumorstatus)),                    UNIX_TIMESTAMP(MAX(nnachsorge.datum))                )            )                                                           AS '043_ende'",            "IF(sit.datum_sicherung_rezidiv_metast IS NOT NULL, 1, 0)   AS '044_ereignis'",            "IF(                sit.datum_sicherung_rezidiv_metast IS NOT NULL,                UNIX_TIMESTAMP(sit.datum_sicherung_rezidiv_metast),                CONCAT_WS('|',                    UNIX_TIMESTAMP(MAX(x.todesdatum)),                    UNIX_TIMESTAMP(MAX(sit.lastTumorstatus)),                    UNIX_TIMESTAMP(MAX(nnachsorge.datum))                )            )                                                           AS '044_ende'",            "IF(MAX(x.todesdatum) IS NOT NULL, 1, 0)                    AS '045_ereignis'",            "UNIX_TIMESTAMP(sit.datum_sicherung_rezidiv)                AS '045_beginn'",            "IF(                MAX(x.todesdatum) IS NOT NULL,                UNIX_TIMESTAMP(MAX(x.todesdatum)),                CONCAT_WS('|',                    UNIX_TIMESTAMP(MAX(sit.lastTumorstatus)),                    UNIX_TIMESTAMP(MAX(nnachsorge.datum))                )            )                                                           AS '045_ende'",           "CASE TRUE                WHEN SUBSTR(sit.pt, 3,1) = 'X' THEN 'pTX'                WHEN SUBSTR(sit.pt, 3,1) = '0' THEN 'pT0'                WHEN SUBSTR(sit.pt, 3,1) = 'a' THEN 'pTa'                WHEN SUBSTR(sit.pt, 3,2) = 'is' THEN 'pTis'                WHEN SUBSTR(sit.pt, 3,1) = '1' THEN 'pT1'                WHEN SUBSTR(sit.pt, 3,1) = '2' THEN 'pT2'                WHEN SUBSTR(sit.pt, 3,1) = '3' THEN 'pT3'                WHEN SUBSTR(sit.pt, 3,1) = '4' THEN 'pT4'             ELSE                NULL             END                                                                    AS 'pt_section'"        );        if ($this->_params['name'] == 'oz04_1') {            foreach ($additionalContent['fields'] as $fieldIndex => $cond) {                $additionalContent['fields'][$fieldIndex] = str_replace('UNIX_TIMESTAMP', '', $cond);            }            $additionalContent['fields'][] = 'sit.patient_nr';            $additionalContent['fields'][] = 'null as addon';        }        $datasets = $this->loadRessource('oz01', $additionalContent);        foreach ($datasets as $i => $patientDataset) {            if ((int) $patientDataset['primaerfall'] != 1) {                unset($datasets[$i]);                continue;            }            $hBeginn = $patientDataset['h_beginn'];            $disease = $patientDataset['erkrankung'];            //Nur wenn er einer erkrankung zugewiesen werden kann            if (strlen($disease) > 0) {               $this->_activeTypes[$disease] = 1;               $datasets[$i]['addon'] = $tmp = array(                   '041_ereignis'  => $patientDataset['041_ereignis'],                   '041_beginn'    => $hBeginn,                   '041_ende'      => $this->_getLastDate($patientDataset['041_ende']),                   '042_ereignis'  => $patientDataset['042_ereignis'],                   '042_beginn'    => $hBeginn,                   '042_ende'      => $this->_getLastDate($patientDataset['042_ende']),                   '043_ereignis'  => $patientDataset['043_ereignis'],                   '043_beginn'    => $hBeginn,                   '043_ende'      => $this->_getLastDate($patientDataset['043_ende']),                   '044_ereignis'  => $patientDataset['044_ereignis'],                   '044_beginn'    => $hBeginn,                   '044_ende'      => $this->_getLastDate($patientDataset['044_ende']),                   '045_ereignis'  => $patientDataset['045_ereignis'],                   '045_beginn'    => $patientDataset['045_beginn'],                   '045_ende'      => $this->_getLastDate($patientDataset['045_ende']),                   'section'       => $patientDataset['pt_section'],                   'losttofu'      => $patientDataset['losttofu']               );               //Für die ersten 4 Auswertungen muss jeweils der uicc Bereich vorhanden sein!               if (strlen($tmp['section']) > 0) {                   //Dauer berechnen                   for ($i=1;$i<=4; $i++) {                       if (strlen($tmp["04{$i}_beginn"]) > 0 && strlen($tmp["04{$i}_ende"]) > 0) {                           $tmp["04{$i}_dauer"] = ($tmp["04{$i}_ende"] - $tmp["04{$i}_beginn"]) / 86400 / 30.4375;                       } else {                           $tmp["04{$i}_dauer"] = null;                       }                       if (strlen($tmp["04{$i}_dauer"]) > 0 && strlen($tmp["section"]) > 0) {                           $this->_values["04{$i}"][$disease]['range'][] = $tmp["04{$i}_dauer"];                           $this->_values["04{$i}"][$disease]['event'][] = $tmp["04{$i}_ereignis"];                           $this->_values["04{$i}"][$disease]['legend'][] = $tmp["section"];                       }                   }               }               $tmp["045_dauer"] = (strlen($tmp["045_beginn"]) > 0 && strlen($tmp["045_ende"]) > 0) === true                  ? ($tmp["045_ende"] - $tmp["045_beginn"]) / 86400 / 30.4375                  : null               ;               if ($tmp["045_dauer"] !== null) {                   $this->_values["045"][$disease]['range'][] = $tmp["045_dauer"];                   $this->_values["045"][$disease]['event'][] = $tmp["045_ereignis"];               }               $this->_values['losttofu'][$disease]['count']++;               $this->_values['losttofu'][$disease]['val']['losttofu'] += (int) ($tmp['losttofu'] == 1);            }        }        switch ($this->_params['name']) {            case 'oz04':                require_once 'reports/pdf/oz/oz04/p1.php';                break;            case 'oz04_1':                $this->_data  = $this->_convertOz041ReportData($datasets);                $this->writeXLS('oz01');                break;        }   }}?>