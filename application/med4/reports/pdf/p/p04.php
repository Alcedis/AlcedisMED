<?php/* * AlcedisMED * Copyright (C) 2010-2016  Alcedis GmbH * * This program is free software: you can redistribute it and/or modify * it under the terms of the GNU General Public License as published by * the Free Software Foundation, either version 3 of the License, or * (at your option) any later version. * * This program is distributed in the hope that it will be useful, * but WITHOUT ANY WARRANTY; without even the implied warranty of * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the * GNU General Public License for more details. * * You should have received a copy of the GNU General Public License * along with this program.  If not, see <http://www.gnu.org/licenses/>. */class reportContentP04 extends reportExtensionP{    /**     * _values     *     * @access  protected     * @var     array     */    protected $_values = array();    /**     * init     *     * @access  public     * @param   mixed $renderer // TODO interface     * @return  void     */    public function init($renderer)    {        if ($this->_params['name'] == 'p04') {            $renderer->addPage('L');        }    }    /**     * _initValues     *     * @access  protected     * @return  void     */    protected function _initValues()    {        $this->_values['041_uicc']  = array('type' => 'uicc', 'range' => array(), 'event' => array(), 'legend' => array());        $this->_values['041_pt']    = array('type' => 'pt',   'range' => array(), 'event' => array(), 'legend' => array());        $this->_values['042_uicc']  = array('type' => 'uicc', 'range' => array(), 'event' => array(), 'legend' => array());        $this->_values['042_pt']    = array('type' => 'pt',   'range' => array(), 'event' => array(), 'legend' => array());    }    /**     * generate     *     * @access  public     * @param   mixed $renderer // TODO interface     * @return  void     */    public function generate($renderer)    {        $config = $this->loadConfigs('p04', false, true);        $this->_initValues();        $additionalContent['joins'] = array(            "LEFT JOIN `status` snachsorge ON snachsorge.patient_id = sit.patient_id AND snachsorge.form = 'nachsorge' AND LOCATE(CONCAT_WS('','-',sit.erkrankung_id,'-'), s.report_param) > 0",                "LEFT JOIN nachsorge nnachsorge ON nnachsorge.nachsorge_id = snachsorge.form_id"        );        $additionalContent['selects'] = array(            "MAX(t2.datum_sicherung) AS 'lastTumorstatus'",            "MIN(IF(LEFT(t2.anlass, 1) = 'r', t2.datum_sicherung, NULL)) AS 'datum_sicherung_rezidiv'",        );        $additionalContent['fields'] = array(            "IF(MAX(x.todesdatum) IS NOT NULL, 1, 0)                    AS '041_ereignis'",            "IF(                MAX(x.todesdatum) IS NOT NULL,                UNIX_TIMESTAMP(MAX(x.todesdatum)),                CONCAT_WS('|',                    UNIX_TIMESTAMP(MAX(sit.lastTumorstatus)),                    UNIX_TIMESTAMP(MAX(nnachsorge.datum))                )            )                                                           AS '041_ende'",            "IF(sit.datum_sicherung_rezidiv IS NOT NULL, 1, 0)          AS '042_ereignis'",            "IF(                sit.datum_sicherung_rezidiv IS NOT NULL,                UNIX_TIMESTAMP(sit.datum_sicherung_rezidiv),                CONCAT_WS('|',                    UNIX_TIMESTAMP(MAX(x.todesdatum)),                    UNIX_TIMESTAMP(MAX(sit.lastTumorstatus)),                    UNIX_TIMESTAMP(MAX(nnachsorge.datum))                )            )                                                           AS '042_ende'",            "CASE TRUE                WHEN SUBSTR(sit.pt, 3,1) = 'X' THEN 'pTX'                WHEN SUBSTR(sit.pt, 3,1) = '0' THEN 'pT0'                WHEN SUBSTR(sit.pt, 3,1) = 'a' THEN 'pTa'                WHEN SUBSTR(sit.pt, 3,2) = 'is' THEN 'pTis'                WHEN SUBSTR(sit.pt, 3,1) = '1' THEN 'pT1'                WHEN SUBSTR(sit.pt, 3,1) = '2' THEN 'pT2'                WHEN SUBSTR(sit.pt, 3,1) = '3' THEN 'pT3'                WHEN SUBSTR(sit.pt, 3,1) = '4' THEN 'pT4'             ELSE                NULL             END                                                        AS 'pt_section'"        );        if ($this->_params['name'] == 'p04_1') {            foreach ($additionalContent['fields'] as $fieldIndex => $cond) {                $additionalContent['fields'][$fieldIndex] = str_replace('UNIX_TIMESTAMP', '', $cond);            }            $additionalContent['fields'][] = 'sit.patient_nr';            $additionalContent['fields'][] = 'null as addon';        }        $datasets = $this->loadRessource('p01', $additionalContent);        $reportSection = array('pt', 'uicc');        foreach ($datasets as $i => $patientDataset) {            if ((int) $patientDataset['primaerfall'] != 1) {               unset($datasets[$i]);               continue;            }            $hBeginn = $this->_params['name'] == 'p04_1' ? $patientDataset['bezugsdatum'] : strtotime($patientDataset['bezugsdatum']);            $datasets[$i]['addon'] = $tmp = array(                '041_ereignis'  => $patientDataset['041_ereignis'],                '041_beginn'    => $hBeginn,                '041_ende'      => $this->_getLastDate($patientDataset['041_ende']),                '042_ereignis'  => $patientDataset['042_ereignis'],                '042_beginn'    => $hBeginn,                '042_ende'      => $this->_getLastDate($patientDataset['042_ende']),                'pt'            => $patientDataset['pt_section'],                'uicc'          => $this->_getUiccSection($patientDataset['uicc'])            );            foreach ($reportSection as $section) {                if (strlen($tmp[$section]) > 0) {                    //Dauer berechnen                    for ($i=1;$i<=2; $i++) {                        if (strlen($tmp["04{$i}_beginn"]) > 0 && strlen($tmp["04{$i}_ende"]) > 0) {                            $tmp["04{$i}_dauer_{$section}"] = ($tmp["04{$i}_ende"] - $tmp["04{$i}_beginn"]) / 86400 / 30.4375;                        } else {                            $tmp["04{$i}_dauer_{$section}"] = null;                        }                        if (strlen($tmp["04{$i}_dauer_{$section}"]) > 0) {                            $this->_values["04{$i}_{$section}"]['range'][] = $tmp["04{$i}_dauer_{$section}"];                            $this->_values["04{$i}_{$section}"]['event'][] = $tmp["04{$i}_ereignis"];                            $this->_values["04{$i}_{$section}"]['legend'][] = $tmp[$section];                        }                    }                }            }        }        switch ($this->_params['name']) {            case 'p04':                require_once 'reports/pdf/p/p04/p1.php';                break;            case 'p04_1':                $this->_data  = $this->_convertP041ReportData($datasets);                $this->writeXLS('p01');                break;        }    }    /**     * _convertP041ReportData     *     * @access  protected     * @param   array $data     * @return  array     */    protected function _convertP041ReportData($data)    {        foreach ($data as &$dataset) {            $addon = $dataset['addon'];            unset(                $dataset['pt_section'],                $dataset['patient_id'],                $dataset['erkrankung_id'],                $dataset['max_uicc'],                $dataset['anlass'],                $dataset['start_date'],                $dataset['sit_start_date'],                $dataset['end_date'],                $dataset['h_beginn'],                $dataset['041_ereignis'],                $dataset['041_ende'],                $dataset['042_ereignis'],                $dataset['042_ende'],                $dataset['nz'],                $dataset['g_original'],                $dataset['addon']            );            $dataset = array_merge($dataset, $addon);        }        return $data;    }}?>