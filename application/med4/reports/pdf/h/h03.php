<?php/*
 * AlcedisMED
 * Copyright (C) 2010-2016  Alcedis GmbH
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */ 

class reportContentH03 extends reportExtensionH{   protected $_values = array();   protected $_ukey = array();   public function init(alcReportPdf $renderer){      $renderer->addPage();   }   private function _initValues()   {      $lymphadenektomie = 'alle_lymphadenektomie|inguinal_gt6|inguinal_lt6|inguinal_ka|iliakal_obtur_gt6|iliakal_obtur_lt6|iliakal_obtur_ka|axillaer_gt6|axillaer_lt6|axillaer_ka|zervikal_gt6|zervikal_lt6|zervikal_ka';      $percentArray = array(         'dignitaet'         => array('val' => array('alle', 'in_situ', 'maligne', 'sonstige', 'keine_angabe')),         'pt'                => array('val' => explode('|', 'alle|pT0|pTis|pT1|pT1a|pT1b|pT2|pT2a|pT2b|pT3|pT3a|pT3b|pT4|pT4a|pT4b|pTX|keine_angabe')),         'pn'                => array('val' => explode('|', 'alle|pN0|pN1|pN1a|pN1b|pN2|pN2a|pN2b|pN2c|pN3|pNX|keine_angabe')),         'm'                 => array('val' => explode('|', 'alle|M0|M1|M1a|M1b|M1c|MX|keine_angabe')),         'g'                 => array('val' => explode('|', 'alle|G1|G2|G3|G4|GX|keine_angabe')),         'lymphsono'         => array('val' => array('alle', 'sono')),         'lymphadenektomie'   => array('val' => explode('|', $lymphadenektomie)),         'invasiv'           => array('val' => array('alle', 'ptpn')),         'sys_therapie'      => array('val' => array('th_alle', 'chemo')),      );      $this         ->_initPercentArray($percentArray)      ;      return $this;   }   public function generate($renderer)   {      $renderer->setConfig($this->loadConfigs('h03', false, true));      $additionalContent['selects'] = array(        "CONCAT_WS('-', p.patient_id, e.erkrankung_id, t.anlass) as 'ukey'",      );      $additionalContent['fields'] = array(        "(SELECT ts.g FROM tumorstatus ts WHERE ts.erkrankung_id = sit.erkrankung_id AND ts.anlass = sit.anlass AND ts.g IS NOT NULL ORDER BY ts.datum_sicherung DESC, ts.sicherungsgrad ASC, ts.datum_beurteilung DESC LIMIT 1) AS g",        "sit.ukey"      );      $additionalContent['condition'] = "(SUBSTR(diagnose, 1, 3) IN('C00', 'C43', 'C44', 'C49', 'C60', 'C84', 'C85', 'C86') OR diagnose LIKE 'C46.0%')";      $data1 = $this->loadRessource('h01_1', $additionalContent);      $data2 = $this->loadRessource('h01_2', $additionalContent);      $this->_count = count($data1);      $this->_initValues();      foreach ($data1 as $dataset) {         //Dignitaet         $morphologie = $dataset['morphologie'];         $this->_values['dignitaet']['count']++;         $this->_values['dignitaet']['val']['alle']++;         $this->_values['dignitaet']['val']['in_situ']      += (int) (str_ends_with($morphologie, '/2'));         $this->_values['dignitaet']['val']['maligne']      += (int) (str_ends_with($morphologie, '/3'));         $this->_values['dignitaet']['val']['sonstige']     += (int) (str_ends_with($morphologie, array('/0', '/1', '/6', '/9')));         $this->_values['dignitaet']['val']['keine_angabe'] += (int) (strlen($morphologie) == 0);         //pt         $this->_values['pt']['count']++;         $this->_values['pt']['val']['alle']++;         $this->_values['pt']['val']['pT0']  += (int) ($dataset['pt'] == 'pT0');         $this->_values['pt']['val']['pTis'] += (int) ($dataset['pt'] == 'pTis');         $this->_values['pt']['val']['pT1']  += (int) ($dataset['pt'] == 'pT1');         $this->_values['pt']['val']['pT1a'] += (int) ($dataset['pt'] == 'pT1a');         $this->_values['pt']['val']['pT1b'] += (int) ($dataset['pt'] == 'pT1b');         $this->_values['pt']['val']['pT2']  += (int) ($dataset['pt'] == 'pT2');         $this->_values['pt']['val']['pT2a'] += (int) ($dataset['pt'] == 'pT2a');         $this->_values['pt']['val']['pT2b'] += (int) ($dataset['pt'] == 'pT2b');         $this->_values['pt']['val']['pT3']  += (int) ($dataset['pt'] == 'pT3');         $this->_values['pt']['val']['pT3a'] += (int) ($dataset['pt'] == 'pT3a');         $this->_values['pt']['val']['pT3b'] += (int) ($dataset['pt'] == 'pT3b');         $this->_values['pt']['val']['pT4']  += (int) ($dataset['pt'] == 'pT4');         $this->_values['pt']['val']['pT4a'] += (int) ($dataset['pt'] == 'pT4a');         $this->_values['pt']['val']['pT4b'] += (int) ($dataset['pt'] == 'pT4b');         $this->_values['pt']['val']['pTX']  += (int) ($dataset['pt'] == 'pTX');         $this->_values['pt']['val']['keine_angabe']  += (int) (strlen($dataset['pt']) == 0);         //pn         $this->_values['pn']['count']++;         $this->_values['pn']['val']['alle']++;         $this->_values['pn']['val']['pN0']  += (int) ($dataset['pn'] == 'pN0');         $this->_values['pn']['val']['pN1']  += (int) ($dataset['pn'] == 'pN1');         $this->_values['pn']['val']['pN1a'] += (int) ($dataset['pn'] == 'pN1a');         $this->_values['pn']['val']['pN1b'] += (int) ($dataset['pn'] == 'pN1b');         $this->_values['pn']['val']['pN2']  += (int) ($dataset['pn'] == 'pN2');         $this->_values['pn']['val']['pN2a'] += (int) ($dataset['pn'] == 'pN2a');         $this->_values['pn']['val']['pN2b'] += (int) ($dataset['pn'] == 'pN2b');         $this->_values['pn']['val']['pN2c'] += (int) ($dataset['pn'] == 'pN2c');         $this->_values['pn']['val']['pN3']  += (int) ($dataset['pn'] == 'pN3');         $this->_values['pn']['val']['pNX']  += (int) ($dataset['pn'] == 'pNX');         $this->_values['pn']['val']['keine_angabe'] += (int) (strlen($dataset['pn']) == 0);         //m         $this->_values['m']['count']++;         $this->_values['m']['val']['alle']++;         $this->_values['m']['val']['M0']             += (int) (substr($dataset['m'], 1) == 'M0');         $this->_values['m']['val']['M1']             += (int) (substr($dataset['m'], 1) == 'M1');         $this->_values['m']['val']['M1a']            += (int) (substr($dataset['m'], 1) == 'M1a');         $this->_values['m']['val']['M1b']            += (int) (substr($dataset['m'], 1) == 'M1b');         $this->_values['m']['val']['M1c']            += (int) (substr($dataset['m'], 1) == 'M1c');         $this->_values['m']['val']['MX']             += (int) (substr($dataset['m'], 1) == 'MX');         $this->_values['m']['val']['keine_angabe']   += (int) (strlen($dataset['m']) == 0);         //g         $this->_values['g']['count']++;         $this->_values['g']['val']['alle']++;         $this->_values['g']['val']['GX']            += (int) ($dataset['g'] == 'X');         $this->_values['g']['val']['G1']            += (int) ($dataset['g'] == '1');         $this->_values['g']['val']['G2']            += (int) ($dataset['g'] == '2');         $this->_values['g']['val']['G3']            += (int) ($dataset['g'] == '3');         $this->_values['g']['val']['G4']            += (int) ($dataset['g'] == '4');         $this->_values['g']['val']['keine_angabe']  += (int) (strlen($dataset['g']) == 0);         //lymphknotensonographie         $this->_values['lymphsono']['count']++;         $this->_values['lymphsono']['val']['alle']++;         $this->_values['lymphsono']['val']['sono'] += (int) ($dataset['lk_sonographie'] == 1);         if ($dataset['anz_histo_lk_entfernt'] > 0) {             $this->_values['lymphadenektomie']['count']++;             $this->_values['lymphadenektomie']['val']['alle_lymphadenektomie']++;             $this->_ukey[$dataset['ukey']] = array();         }         $this->_values['invasiv']['count']++;         $this->_values['invasiv']['val']['alle']++;         $this->_values['invasiv']['val']['ptpn'] += strlen($dataset['pt']) > 0 && strlen($dataset['pn']) > 0;         $this->_values['sys_therapie']['count'] += $dataset['th_sys_count'];         $this->_values['sys_therapie']['val']['th_alle'] += $dataset['th_sys_count'];         $this->_values['sys_therapie']['val']['chemo'] += $dataset['chemo_count'];     }     foreach ($data2 as $dataset) {        $ukey = $dataset['ukey'];        if (array_key_exists($dataset['ukey'], $this->_ukey) === true) {            foreach (array('inguinal', 'iliakal_obtur', 'axillaer', 'zervikal') as $pos) {                foreach (array('lt6', 'gt6', 'ka') as $comp) {                    $this->_checkOP($dataset, $ukey, $pos, $comp);                }             }         }     }     require_once 'reports/pdf/h/h03/p1.php';   }   private function _checkOP($dataset, $ukey, $field, $type)   {       switch ($type) {           case 'gt6': $condition = strlen($dataset['anz_lk_entf_' . $field]) > 0 && $dataset['anz_lk_entf_' .$field] > 5; break;           case 'lt6': $condition = strlen($dataset['anz_lk_entf_' . $field]) > 0 && $dataset['anz_lk_entf_' .$field] < 6; break;           case 'ka':  $condition = strlen($dataset['anz_lk_entf_' . $field]) == 0;                                        break;       }       $condition = $dataset["sys_lymph_{$field}"] == 1 ? $condition : false;       $fullField = $field . '_' . $type;       if (in_array($fullField, $this->_ukey[$ukey]) === false && $condition == true) {           $this->_values['lymphadenektomie']['val'][$fullField]++;           $this->_ukey[$ukey][] = $fullField;       }   }}?>