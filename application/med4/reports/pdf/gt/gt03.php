<?php/*
 * AlcedisMED
 * Copyright (C) 2010-2016  Alcedis GmbH
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */ 

class reportContentGt03 extends reportExtensionGt{   protected $_values = array();   public function init(alcReportPdf $renderer){      $renderer->addPage();   }   private function _initValues()   {      $percentArray = array(         'dignitaet'                   => array('val' => array('alle', 'in_situ', 'maligne', 'sonstige', 'keine_angabe')),         'pt'                          => array('val' => array('alle', 'pT0', 'pTis', 'pT1', 'pT1a', 'pT1a1', 'pT1a2', 'pT1b', 'pT1b1', 'pT1b2','pT1c',                                                               'pT2', 'pT2a', 'pT2a1', 'pT2a2', 'pT2b', 'pT2c', 'pT3', 'pT3a', 'pT3b', 'pT3c', 'pT4', 'pTX', 'keine_angabe', 'keine_op')),         'pn'                          => array('val' => array('alle', 'pN0', 'pN1', 'pN1a', 'pN1b', 'pN2', 'pN2a', 'pN2b', 'pN2c', 'pN3', 'pNX', 'keine_angabe', 'keine_op')),         'm'                           => array('val' => array('alle', 'M0', 'M1', 'M1a', 'M1b', 'MX', 'keine_angabe')),         'g'                           => array('val' => array('alle', 'gX', 'g1', 'g2', 'g3', 'keine_angabe')),         'eingriff_ovar'               => array('val' => array('e_prae', 'e_prim', 'e_rez')),         'eingriff_zervix'             => array('val' => array('e_prae', 'e_prim', 'e_rez')),         'eingriff_endo'               => array('val' => array('e_prae', 'e_prim', 'e_rez')),         'eingriff_vulva'              => array('val' => array('e_prae', 'e_prim', 'e_rez')),         'makro_tumorrest'             => array('val' => array('alle', 'makro_tumorfrei')),         'patho_tumorrest_zervix'      => array('val' => array('alle', 'r0', 'r1', 'r2', 'rx', 'ka')),         'patho_tumorrest_vulva'       => array('val' => array('alle', 'r0', 'r1', 'r2', 'rx', 'ka')),         'patho_tumorrest_endo'        => array('val' => array('alle', 'r0', 'r1', 'r2', 'rx', 'ka')),         'sys_therapie'                => array('val' => array()),         'sys_g_indikation'            => array('val' => array()),         'operateure' => array(            'val'                => array(),            'op_gesamt'          => array(),            'op_operateur'       => array(),            'op_assi'            => array(),            'op_prim_gesamt'     => array(),            'op_prim_operateur'  => array(),            'op_prim_assi'       => array()         ),      );      $this         ->_initPercentArray($percentArray)      ;      return $this;   }   public function generate($renderer)   {      $renderer->setConfig($this->loadConfigs('gt03', false, true));      $dataCache    = array();      $data         = $this->loadRessource('gt01_1');      $this->_count = count($data);      $this->_initValues();      foreach ($data as $dataset)      {         $diagnose      = $dataset['diagnose'];         $primaerfall   = (bool) $dataset['primaerfall'];         //Diese informationen müssen aus gt01_1 kommen         if ($primaerfall === true) {            //Dignitaet            $this->_values['dignitaet']['count']++;            $this->_values['dignitaet']['val']['alle']++;            $this->_values['dignitaet']['val']['in_situ']      += (int) (substr($dataset['morphologie'], -2) == '/2');            $this->_values['dignitaet']['val']['maligne']      += (int) (substr($dataset['morphologie'], -2) == '/3');            $this->_values['dignitaet']['val']['sonstige']     += (int) (strlen($dataset['morphologie']) > 0 && in_array(substr($dataset['morphologie'], -2), array('/2', '/3')) === false);            $this->_values['dignitaet']['val']['keine_angabe'] += (int) (strlen($dataset['morphologie']) == 0);            //pt            $this->_values['pt']['count']++;            $this->_values['pt']['val']['alle']++;            $this->_values['pt']['val']['pT0']           += (int) ($dataset['pt'] == 'pT0');            $this->_values['pt']['val']['pTis']          += (int) ($dataset['pt'] == 'pTis');            $this->_values['pt']['val']['pT1']           += (int) ($dataset['pt'] == 'pT1');            $this->_values['pt']['val']['pT1a']          += (int) ($dataset['pt'] == 'pT1a');            $this->_values['pt']['val']['pT1a1']         += (int) ($dataset['pt'] == 'pT1a1');            $this->_values['pt']['val']['pT1a2']         += (int) ($dataset['pt'] == 'pT1a2');            $this->_values['pt']['val']['pT1b']          += (int) ($dataset['pt'] == 'pT1b');            $this->_values['pt']['val']['pT1b1']         += (int) ($dataset['pt'] == 'pT1b1');            $this->_values['pt']['val']['pT1b2']         += (int) ($dataset['pt'] == 'pT1b2');            $this->_values['pt']['val']['pT1c']          += (int) ($dataset['pt'] == 'pT1c');            $this->_values['pt']['val']['pT2']           += (int) ($dataset['pt'] == 'pT2');            $this->_values['pt']['val']['pT2a']          += (int) ($dataset['pt'] == 'pT2a');            $this->_values['pt']['val']['pT2a1']         += (int) ($dataset['pt'] == 'pT2a1');            $this->_values['pt']['val']['pT2a2']         += (int) ($dataset['pt'] == 'pT2a2');            $this->_values['pt']['val']['pT2b']          += (int) ($dataset['pt'] == 'pT2b');            $this->_values['pt']['val']['pT2c']          += (int) ($dataset['pt'] == 'pT2c');            $this->_values['pt']['val']['pT3']           += (int) ($dataset['pt'] == 'pT3');            $this->_values['pt']['val']['pT3a']          += (int) ($dataset['pt'] == 'pT3a');            $this->_values['pt']['val']['pT3b']          += (int) ($dataset['pt'] == 'pT3b');            $this->_values['pt']['val']['pT3c']          += (int) ($dataset['pt'] == 'pT3c');            $this->_values['pt']['val']['pT4']           += (int) ($dataset['pt'] == 'pT4');            $this->_values['pt']['val']['pTX']           += (int) ($dataset['pt'] == 'pTX');            $this->_values['pt']['val']['keine_angabe']  += (int) (strlen($dataset['pt']) == 0);            $this->_values['pt']['val']['keine_op']      += (int) (strlen($dataset['pt']) == 0 && strlen($dataset['datumprimaer_rezidiv_op']) == 0);             //pn            $this->_values['pn']['count']++;            $this->_values['pn']['val']['alle']++;            $this->_values['pn']['val']['pN0']           += (int) ($dataset['pn'] == 'pN0');            $this->_values['pn']['val']['pN1']           += (int) ($dataset['pn'] == 'pN1');            $this->_values['pn']['val']['pN1a']          += (int) ($dataset['pn'] == 'pN1a');            $this->_values['pn']['val']['pN1b']          += (int) ($dataset['pn'] == 'pN1b');            $this->_values['pn']['val']['pN2']           += (int) ($dataset['pn'] == 'pN2');            $this->_values['pn']['val']['pN2a']          += (int) ($dataset['pn'] == 'pN2a');            $this->_values['pn']['val']['pN2b']          += (int) ($dataset['pn'] == 'pN2b');            $this->_values['pn']['val']['pN2c']          += (int) ($dataset['pn'] == 'pN2c');            $this->_values['pn']['val']['pN3']           += (int) ($dataset['pn'] == 'pN3');            $this->_values['pn']['val']['pNX']           += (int) ($dataset['pn'] == 'pNX');            $this->_values['pn']['val']['keine_angabe']  += (int) (strlen($dataset['pn']) == 0);            $this->_values['pn']['val']['keine_op']      += (int) (strlen($dataset['pn']) == 0 && strlen($dataset['datumprimaer_rezidiv_op']) == 0);            //m            $this->_values['m']['count']++;            $this->_values['m']['val']['alle']++;            $this->_values['m']['val']['M0']             += (int) (substr($dataset['m'], 1) == 'M0');            $this->_values['m']['val']['M1']             += (int) (substr($dataset['m'], 1) == 'M1');            $this->_values['m']['val']['M1a']            += (int) (substr($dataset['m'], 1) == 'M1a');            $this->_values['m']['val']['M1b']            += (int) (substr($dataset['m'], 1) == 'M1b');            $this->_values['m']['val']['MX']             += (int) (substr($dataset['m'], 1) == 'MX');            $this->_values['m']['val']['keine_angabe']   += (int) (strlen($dataset['m']) == 0);            //g            $this->_values['g']['count']++;            $this->_values['g']['val']['alle']++;            $this->_values['g']['val']['gX']             += (int) ($dataset['g'] == 'GX');            $this->_values['g']['val']['g1']             += (int) ($dataset['g'] == 'G1');            $this->_values['g']['val']['g2']             += (int) ($dataset['g'] == 'G2');            $this->_values['g']['val']['g3']             += (int) ($dataset['g'] == 'G3');            $this->_values['g']['val']['keine_angabe']   += (int) (strlen($dataset['g']) == 0);         }         //gt03.6.1 Eingriffe bei Genitalmalignom (Ovar)         $this->_values['eingriff_ovar']['val']['e_prim'] += (int) ($primaerfall === true && ($diagnose == 'C56' || ($diagnose == 'D39.1' && $dataset['g'] == 'GB')) ? $dataset['anz_ops'] : 0);         $this->_values['eingriff_ovar']['val']['e_rez']  += (int) ($primaerfall === false && ($diagnose == 'C56' || ($diagnose == 'D39.1' && $dataset['g'] == 'GB')) ? $dataset['anz_ops'] : 0);         //gt03.6.2 Eingriffe bei Genitalmalignom (Zervix)         $this->_values['eingriff_zervix']['val']['e_prim'] += (int) ($primaerfall === true && substr($diagnose, 0,3) == 'C53' ? $dataset['anz_ops'] : 0);         $this->_values['eingriff_zervix']['val']['e_rez']  += (int) ($primaerfall === false && substr($diagnose, 0,3) == 'C53' ? $dataset['anz_ops'] : 0);         //gt03.6.3 Eingriffe bei Genitalmalignom (Endometrium)         $this->_values['eingriff_endo']['val']['e_prim'] += (int) ($primaerfall === true && $diagnose == 'C54.1' ? $dataset['anz_ops'] : 0);         $this->_values['eingriff_endo']['val']['e_rez']  += (int) ($primaerfall === false && $diagnose == 'C54.1' ? $dataset['anz_ops'] : 0);         //gt03.6.4 Eingriffe bei Genitalmalignom (Vulva)         $this->_values['eingriff_vulva']['val']['e_prim'] += (int) ($primaerfall === true && substr($diagnose,0,3) == 'C51' ? $dataset['anz_ops'] : 0);         $this->_values['eingriff_vulva']['val']['e_rez']  += (int) ($primaerfall === false && substr($diagnose,0,3) == 'C51' ? $dataset['anz_ops'] : 0);         //gt03.7 Makroskopischer Tumorrest bei Ovarialkarzinomen         if (            ($diagnose == 'C56' || ($diagnose == 'D39.1' && $dataset['g'] != 'GB')) &&            strlen($dataset['datumprimaer_rezidiv_op']) > 0 &&            (in_array(substr($dataset['figo'], 0, 3), array('IIB', 'III')) === true || substr($dataset['figo'], 0, 2) == 'IV')         ) {            $this->_values['makro_tumorrest']['count']++;            $this->_values['makro_tumorrest']['val']['alle']++;            $this->_values['makro_tumorrest']['val']['makro_tumorfrei'] += (int) (strlen($dataset['tumorrest']) == 0 || $dataset['tumorrest'] == '0');         }         $rLokal = array('0', '1', '2', 'x');         if (strlen($dataset['datumprimaer_rezidiv_op']) > 0) {            //gt03.8.1 Pathologischer Tumorrest (Zervix)            if (substr($diagnose,0,3) == 'C53') {               $this->_values['patho_tumorrest_zervix']['count']++;               $this->_values['patho_tumorrest_zervix']['val']['alle']++;               foreach ($rLokal as $l) {                  $this->_values['patho_tumorrest_zervix']['val']['r' . $l] += (int) ($dataset['r_lokal'] == $l);               }               $this->_values['patho_tumorrest_zervix']['val']['ka'] += (int) (strlen($dataset['r_lokal']) == 0);            }            //gt03.8.2 Pathologischer Tumorrest (Vulva)            if (substr($diagnose,0,3) == 'C51') {               $this->_values['patho_tumorrest_vulva']['count']++;               $this->_values['patho_tumorrest_vulva']['val']['alle']++;               foreach ($rLokal as $l) {                  $this->_values['patho_tumorrest_vulva']['val']['r' . $l] += (int) ($dataset['r_lokal'] == $l);               }               $this->_values['patho_tumorrest_vulva']['val']['ka'] += (int) (strlen($dataset['r_lokal']) == 0);            }            //gt03.9.3 Pathologischer Tumorrest (Endometrium)            if ($diagnose == 'C54.1') {               $this->_values['patho_tumorrest_endo']['count']++;               $this->_values['patho_tumorrest_endo']['val']['alle']++;               foreach ($rLokal as $l) {                  $this->_values['patho_tumorrest_endo']['val']['r' . $l] += (int) ($dataset['r_lokal'] == $l);               }               $this->_values['patho_tumorrest_endo']['val']['ka'] += (int) (strlen($dataset['r_lokal']) == 0);            }         }      } //foreach end      $operateurData   = array();      $operateure      = $this->loadRessource('operateure');      foreach ($operateure as $dataset) {         if (strlen($dataset['operateure']) > 0) {            $art            = explode('|', $dataset['operateure']);            $eingriffId     = $dataset['eingriff_id'];            $primOp         = $art[0];            $op1            = $art[1];            $op2            = $art[2];            $operateure = array($op1, $op2);            //$x = 0 == 1.Operateur / $x = 1 == Assistenz            foreach ($operateure as $x => $operateur) {               if (strlen($operateur) > 0) {                 if (array_key_exists($operateur, $operateurData) === false) {                    $operateurData[$operateur] = $this->_buildOpArray();                 }                 $operateurData[$operateur]['val'][$eingriffId] = 1;                 if ($x == 0) {                    $operateurData[$operateur]['op_operateur'][$eingriffId] = 1;                 } else {                    $operateurData[$operateur]['op_assi'][$eingriffId] = 1;                 }                 if ($primOp == 1) {                    $operateurData[$operateur]['op_prim_gesamt'][$eingriffId] = 1;                    if ($x == 0) {                       $operateurData[$operateur]['op_prim_operateur'][$eingriffId] = 1;                    } else {                       $operateurData[$operateur]['op_prim_assi'][$eingriffId] = 1;                    }                 }               }            }         }      }      //Zuweisung Operateure      foreach ($operateurData as $arzt => $op) {         $this->_values['operateure']['val'][$arzt]               = count($op['val']);         $this->_values['operateure']['op_operateur'][]           = count($op['op_operateur']);         $this->_values['operateure']['op_assi'][]                = count($op['op_assi']);         $this->_values['operateure']['op_prim_gesamt'][]         = count($op['op_prim_gesamt']);         $this->_values['operateure']['op_prim_operateur'][]      = count($op['op_prim_operateur']);         $this->_values['operateure']['op_prim_assi'][]           = count($op['op_prim_assi']);      }      //gt03.10  Anzahl durchgeführte Chemo- und Immuntherapien pro Behandlungseinheit (alle Tumore)      $systemischeTherapien = $this->loadRessource('systemische_therapien');      foreach ($systemischeTherapien AS $sysTherapy) {         $org = $sysTherapy['org_id'];         $dDisease = $sysTherapy['gt'];         $this->_values['sys_therapie']['val'][$org] = isset($this->_values['sys_therapie']['val'][$org]) === true            ? $this->_values['sys_therapie']['val'][$org] + 1            : 1         ;         if ($dDisease == '1') {             $this->_values['sys_g_indikation']['val'][$org] = isset($this->_values['sys_g_indikation']['val'][$org]) === true                ? $this->_values['sys_g_indikation']['val'][$org] + 1                : 1             ;         }      }      //gt01.2 - Eingriff      $eingriffe = $this->loadRessource('gt01_2');      foreach ($eingriffe as $eingriff) {          $this->_values['eingriff_ovar']['val']['e_prae'] += (int) $eingriff['eingriff_ovar'];          //gt03.6.2 Eingriffe bei Genitalmalignom (Zervix)          $this->_values['eingriff_zervix']['val']['e_prae'] += (int) $eingriff['eingriff_zervix'];          //gt03.6.3 Eingriffe bei Genitalmalignom (Endometrium)          $this->_values['eingriff_endo']['val']['e_prae'] += (int) $eingriff['eingriff_endometrium'];          //gt03.6.4 Eingriffe bei Genitalmalignom (Vulva)          $this->_values['eingriff_vulva']['val']['e_prae'] += (int) $eingriff['eingriff_vulva'];      }      require_once 'reports/pdf/gt/gt03/p1.php';      require_once 'reports/pdf/gt/gt03/p2.php';   }   private function _buildOpArray()   {      return array(         'val'                   => array(),         'op_gesamt'             => array(),         'op_operateur'          => array(),         'op_assi'               => array(),         'op_prim_gesamt'        => array(),         'op_prim_operateur'     => array(),         'op_prim_assi'          => array(),      );   }}?>