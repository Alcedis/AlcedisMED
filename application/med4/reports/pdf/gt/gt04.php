<?php/*
 * AlcedisMED
 * Copyright (C) 2010-2016  Alcedis GmbH
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */ 

class reportContentGt04 extends reportExtensionGt{    private $_patientDatasets    = array();    protected $_values           = array();    protected $_types            = array('vulva', 'vagina', 'zervix', 'endometrium', 'tuba', 'ovar');    protected $_activeTypes      = array();    /**     * report init     *     * @param $renderer     */    public function init($renderer){        if ($this->_params['name'] == 'gt04') {            $renderer->addPage('L');        }    }    /**     * init values     *     */    private function _initValues()    {        foreach ($this->_types as $type) {           $this->_values['041'][$type] = array('type' => 'figo', 'range' => array(), 'event' => array(), 'legend' => array());           $this->_values['042'][$type] = array('type' => 'figo', 'range' => array(), 'event' => array(), 'legend' => array());           $this->_values['043'][$type] = array('type' => 'figo', 'range' => array(), 'event' => array(), 'legend' => array());           $this->_values['044'][$type] = array('type' => 'figo', 'range' => array(), 'event' => array(), 'legend' => array());           $this->_values['045'][$type] = array('range' => array(), 'event' => array());        }    }    /**     *     * generate     * @param $renderer     */    public function generate($renderer)    {        $config = $this->loadConfigs('gt04', false, true);        $this->_initValues();        $additionalContent['joins'] = array(            "LEFT JOIN `status` snachsorge ON snachsorge.patient_id = sit.patient_id AND snachsorge.form = 'nachsorge' AND LOCATE(CONCAT_WS('','-',sit.erkrankung_id,'-'), s.report_param) > 0",                "LEFT JOIN nachsorge nnachsorge ON nnachsorge.nachsorge_id = snachsorge.form_id"        );        $additionalContent['selects'] = array(            "MAX(t2.datum_sicherung) AS 'lastTumorstatus'",            "MIN(IF(LEFT(t2.anlass, 1) = 'r', t2.datum_sicherung, NULL)) AS 'datum_sicherung_rezidiv'",            "MIN(IF(LEFT(t2.anlass, 1) = 'r' AND (t2.rezidiv_lokal = 1 OR t2.rezidiv_lk = 1), t2.datum_sicherung, NULL)) AS 'datum_sicherung_rezidiv_lokal'",            "MIN(IF(LEFT(t2.anlass, 1) = 'r' AND t2.rezidiv_metastasen = 1, t2.datum_sicherung, NULL)) AS 'datum_sicherung_rezidiv_metast'",            "(SELECT ts.datum_sicherung   FROM tumorstatus ts WHERE p.patient_id = ts.patient_id ORDER BY ts.datum_sicherung DESC LIMIT 1) AS latest_tumorstatus"        );        $additionalContent['fields'] = array(            "sit.patient_id",            "UNIX_TIMESTAMP(                IFNULL(                    MIN(IF(s.form = 'eingriff' AND LEFT(s.report_param, 1) = '1', s.form_date, NULL)),                    MIN(h.datum)                )            )                                                           AS 'h_beginn'",            "IF(MAX(x.todesdatum) IS NOT NULL, 1, 0)                    AS '041_ereignis'",            "IF(                MAX(x.todesdatum) IS NOT NULL,                UNIX_TIMESTAMP(MAX(x.todesdatum)),                CONCAT_WS('|',                    UNIX_TIMESTAMP(MAX(sit.latest_tumorstatus)),                    UNIX_TIMESTAMP(MAX(nnachsorge.datum))                )            )                                                           AS '041_ende'",            "IF(sit.datum_sicherung_rezidiv IS NOT NULL, 1, 0)          AS '042_ereignis'",            "IF(                sit.datum_sicherung_rezidiv IS NOT NULL,                UNIX_TIMESTAMP(sit.datum_sicherung_rezidiv),                CONCAT_WS('|',                    UNIX_TIMESTAMP(MAX(x.todesdatum)),                    UNIX_TIMESTAMP(MAX(sit.lastTumorstatus)),                    UNIX_TIMESTAMP(MAX(nnachsorge.datum))                )            )                                                           AS '042_ende'",            "IF(sit.datum_sicherung_rezidiv_lokal IS NOT NULL, 1, 0)    AS '043_ereignis'",            "IF(                sit.datum_sicherung_rezidiv_lokal IS NOT NULL,                UNIX_TIMESTAMP(sit.datum_sicherung_rezidiv_lokal),                CONCAT_WS('|',                    UNIX_TIMESTAMP(MAX(x.todesdatum)),                    UNIX_TIMESTAMP(MAX(sit.lastTumorstatus)),                    UNIX_TIMESTAMP(MAX(nnachsorge.datum))                )            )                                                           AS '043_ende'",            "IF(sit.datum_sicherung_rezidiv_metast IS NOT NULL, 1, 0)   AS '044_ereignis'",            "IF(                sit.datum_sicherung_rezidiv_metast IS NOT NULL,                UNIX_TIMESTAMP(sit.datum_sicherung_rezidiv_metast),                CONCAT_WS('|',                    UNIX_TIMESTAMP(MAX(x.todesdatum)),                    UNIX_TIMESTAMP(MAX(sit.lastTumorstatus)),                    UNIX_TIMESTAMP(MAX(nnachsorge.datum))                )            )                                                           AS '044_ende'",            "IF(MAX(x.todesdatum) IS NOT NULL, 1, 0)                    AS '045_ereignis'",            "UNIX_TIMESTAMP(sit.datum_sicherung_rezidiv)                AS '045_beginn'",            "IF(                MAX(x.todesdatum) IS NOT NULL,                UNIX_TIMESTAMP(MAX(x.todesdatum)),                CONCAT_WS('|',                    UNIX_TIMESTAMP(MAX(sit.lastTumorstatus)),                    UNIX_TIMESTAMP(MAX(nnachsorge.datum))                )            )                                                           AS '045_ende'",        );        if ($this->_params['name'] == 'gt04_1') {            foreach ($additionalContent['fields'] as $fieldIndex => $cond) {                $additionalContent['fields'][$fieldIndex] = str_replace('UNIX_TIMESTAMP', '', $cond);            }            $additionalContent['fields'][] = 'sit.patient_nr';            $additionalContent['fields'][] = 'null as addon';            $additionalContent['fields'][] = "MAX(DISTINCT IF(komp.revisionsoperation = '1', komp.datum, NULL)) AS 'datum_revisions_op_komplikation'";        }        $datasets = $this->loadRessource('gt01_1', $additionalContent);        //Export        foreach ($datasets as $i => $patientDataset)        {            $hBeginn       = $patientDataset['h_beginn'];            $primaerfall   = $patientDataset['primaerfall'];            $section       = $this->_getFigoSection($patientDataset['figo']);            $diagnoseType  = $this->_getDiagnoseType($patientDataset['diagnose'], $patientDataset['g']);            //Nur wenn er einer e            if ($diagnoseType !== null) {               $datasets[$i]['addon'] = $tmp = array(                   '041_ereignis'  => $patientDataset['041_ereignis'],                   '041_beginn'    => $hBeginn,                   '041_ende'      => $this->_getLastDate($patientDataset['041_ende']),                   '042_ereignis'  => $patientDataset['042_ereignis'],                   '042_beginn'    => $hBeginn,                   '042_ende'      => $this->_getLastDate($patientDataset['042_ende']),                   '043_ereignis'  => $patientDataset['043_ereignis'],                   '043_beginn'    => $hBeginn,                   '043_ende'      => $this->_getLastDate($patientDataset['043_ende']),                   '044_ereignis'  => $patientDataset['044_ereignis'],                   '044_beginn'    => $hBeginn,                   '044_ende'      => $this->_getLastDate($patientDataset['044_ende']),                   '045_ereignis'  => $patientDataset['045_ereignis'],                   '045_beginn'    => $patientDataset['045_beginn'],                   '045_ende'      => $this->_getLastDate($patientDataset['045_ende']),                   'section'       => $section,                   'diagnosetyp'   => $diagnoseType               );               if ($primaerfall == '1') {                   $this->_activeTypes[$diagnoseType] = 1;                   //Für die ersten 4 Auswertungen muss jeweils der FIGO Bereich vorhanden sein!                   if (strlen($tmp['section']) > 0) {                       //Dauer berechnen                       for ($i=1;$i<=4; $i++) {                           if (strlen($tmp["04{$i}_beginn"]) > 0 && strlen($tmp["04{$i}_ende"]) > 0) {                               $tmp["04{$i}_dauer"] = ($tmp["04{$i}_ende"] - $tmp["04{$i}_beginn"]) / 86400 / 30.4375;                           } else {                               $tmp["04{$i}_dauer"] = null;                           }                           if (strlen($tmp["04{$i}_dauer"]) > 0 && strlen($tmp["section"]) > 0) {                               $this->_values["04{$i}"][$diagnoseType]['range'][] = $tmp["04{$i}_dauer"];                               $this->_values["04{$i}"][$diagnoseType]['event'][] = $tmp["04{$i}_ereignis"];                               $this->_values["04{$i}"][$diagnoseType]['legend'][] = $tmp["section"];                           }                       }                   }                   $tmp["045_dauer"] = (strlen($tmp["045_beginn"]) > 0 && strlen($tmp["045_ende"]) > 0) === true                      ? ($tmp["045_ende"] - $tmp["045_beginn"]) / 86400 / 30.4375                      : null                   ;                   if ($tmp["045_dauer"] !== null) {                       $this->_values["045"][$diagnoseType]['range'][] = $tmp["045_dauer"];                       $this->_values["045"][$diagnoseType]['event'][] = $tmp["045_ereignis"];                   }               } else {                    unset($datasets[$i]);               }           } else {               unset($datasets[$i]);           }        }        switch ($this->_params['name']) {            case 'gt04':                require_once 'reports/pdf/gt/gt04/p1.php';                break;            case 'gt04_1':                $this->_data = $this->_convertGt041ReportData($datasets);                $this->writeXLS('gt01_1');                break;        }   }    protected function _getDiagnoseType($diagnose, $grading)    {       $value = null;       switch (true) {          case (substr($diagnose, 0, 3) == 'C51'): $value = 'vulva';       break;          case (substr($diagnose, 0, 3) == 'C52'): $value = 'vagina';      break;          case (substr($diagnose, 0, 3) == 'C53'): $value = 'zervix';      break;          case ($diagnose == 'C54.1'):             $value = 'endometrium'; break;          case ($diagnose == 'C57.0'):             $value = 'tuba';        break;          case ($diagnose == 'C56' || ($diagnose == 'D39.1' && $grading == 'GB')): $value = 'ovar'; break;      }      return $value;    }}?>